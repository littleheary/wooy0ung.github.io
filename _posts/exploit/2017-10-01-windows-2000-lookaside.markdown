---
layout:		post
title:		实战:Windows 2000下快表的使用
author:		wooy0ung
tags:		windows
category:  	exploit
---


>[分析环境]  
>系统: Windows 2000 Professional sp4  
>编译器: Visual C++ 6.0  
>调试器: OllyDbg 1.10  
<!-- more -->


### 0x00 前期准备

VC 6.0新建一个工程, 贴入以下代码, 选择release版本

```
#include <windows.h>

int main()
{
	HLOCAL h1,h2,h3,h4;
	HANDLE hp;
	hp = HeapCreate(0,0,0);
	printf("addr: 0x%08x\n",hp);
	__asm int 3;
	h1=HeapAlloc(hp,HEAP_ZERO_MEMORY,8);
	h2=HeapAlloc(hp,HEAP_ZERO_MEMORY,8);
	h3=HeapAlloc(hp,HEAP_ZERO_MEMORY,16);
	h4=HeapAlloc(hp,HEAP_ZERO_MEMORY,24);
	HeapFree(hp,0,h1);
	HeapFree(hp,0,h2);
	HeapFree(hp,0,h3);
	HeapFree(hp,0,h4);
	h2=HeapAlloc(hp,HEAP_ZERO_MEMORY,16);
	HeapFree(hp,0,h2);

	return 0;
}
```


### 0x01 堆块申请

运行*.exe, 弹出异常框, 选择取消自动调用OllyDbg附加调试

![](/assets/img/exploit/2017-10-01-windows-2000-lookaside/0x00.png)

内存区转到0x00360178, 这里指向的尾块地址不再是偏移0x688

![](/assets/img/exploit/2017-10-01-windows-2000-lookaside/0x01.png)


### 0x02 堆块申请

单步到这里, 观察返回的指针

![](/assets/img/exploit/2017-10-01-windows-2000-lookaside/0x02.png)
![](/assets/img/exploit/2017-10-01-windows-2000-lookaside/0x03.png)

内存区goto 0x00361E90

![](/assets/img/exploit/2017-10-01-windows-2000-lookaside/0x04.png)

```
# 占用态块首结构
Self Size = 00 02
Previous chunk Size = 03 01
Segment Index = 00
Flags = 01
Unused bytes = 08 # 申请8 byte, 分配16 byte
Tag index(Debug) = 00
```

继续下去完成4次分配, 下图依次是4块的块首

![](/assets/img/exploit/2017-10-01-windows-2000-lookaside/0x05.png)


### 0x03 堆块释放

第1次释放

![](/assets/img/exploit/2017-10-01-windows-2000-lookaside/0x06.png)

观察返回指针, goto 0x00361EA0

![](/assets/img/exploit/2017-10-01-windows-2000-lookaside/0x07.png)

现在释放了的空闲块已经链入块表, 注意是单向链表, 由快表指向该块

![](/assets/img/exploit/2017-10-01-windows-2000-lookaside/0x08.png)

第二次释放, 注意后释放的的堆会作为第一个结点链入快表, 已经在表上的结点整体后移

![](/assets/img/exploit/2017-10-01-windows-2000-lookaside/0x09.png)

继续下去完成4次释放, goto 0x00360688, 可以看到快表上已经有3条链

![](/assets/img/exploit/2017-10-01-windows-2000-lookaside/0x0a.png)

现在再次请求分配16byte, 可以看到现在第二条链又空了

![](/assets/img/exploit/2017-10-01-windows-2000-lookaside/0x0b.png)

再释放, 又链入到lookaside[2]

![](/assets/img/exploit/2017-10-01-windows-2000-lookaside/0x0c.png)