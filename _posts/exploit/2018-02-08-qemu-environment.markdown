---
layout:		post
title:		玩转qemu之环境搭建
author:		wooy0ung
tags:		qemu
category:  	exploit
---


>[索引目录]  
>0x01 mips  
>0x02 arm  
>0x03 aarch64  
>0x04 aarch32
<!-- more -->


### 0x01 mips in qemu

[搭建环境]
系统: ubuntu 16.04 LST

安装qemu
```
$ sudo apt-get install qemu
$ sudo apt-get install qemu-user-static
$ sudo apt-get install qemu-system
```

安装网络配置工具
```
$ sudo apt-get install bridge-utils uml-utilities
```

修改/etc/network/interfaces
```
# interfaces(5) file used by ifup(8) and ifdown(8)
auto lo
iface lo inet loopback
auto enp0s5
iface enp0s5  inet manual
up ifconfig enp0s5  0.0.0.0 up
auto br0
iface br0 inet dhcp
bridge_ports enp0s5
bridge_maxwait 0
```

修改/etc/qemu-ifup
```
#!/bin/sh
echo "Executing /etc/qemu-ifup"
echo "Bringing $1 for bridged mode..."
sudo /sbin/ifconfig $1 0.0.0.0 promisc up
echo "Adding $1 to br0..."
sudo /sbin/brctl addif br0 $1
sleep 3
```

赋予可执行权限
```
$ sudo chmod a+x /etc/qemu-ifup
```

重启网络
```
$ sudo /etc/init.d/networking restart
```
![](/assets/img/exploit/2018-02-08-qemu-environment/0x001.png)

关闭enp0s5网络
```
$ sudo ifdown enp0s5
```

启动桥连网络br0, 此时enp0s5会同时启动, 但没有ip地址
```
$ sudo ifup br0
```

启动qemu, macOS下用PD会出现Ctrl+Alt按键冲突, 用Ctrl+Alt+Del就能切换到linux虚拟机
```
$ sudo qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append "root=/dev/sda1 console=tty0" -net nic,macaddr=00:16:3e:00:00:01 -net tap
# login: root	password: root
```
![](/assets/img/exploit/2018-02-08-qemu-environment/0x002.png)

修改虚拟机的/etc/network/interfaces, 保持与ifconfig -a一致, 重启网络
```
$ /etc/init.d/networking restart
```
![](/assets/img/exploit/2018-02-08-qemu-environment/0x003.png)
![](/assets/img/exploit/2018-02-08-qemu-environment/0x004.png)

启动eth1
```
$ ifup eth1
```
![](/assets/img/exploit/2018-02-08-qemu-environment/0x005.png)

网络可双向连通，至此环境搭建完成
![](/assets/img/exploit/2018-02-08-qemu-environment/0x006.png)

安装mipsrop插件
```
https://github.com/devttys0/ida/tree/master/plugins/mipsrop
```

### 0x02 arm in qemu

[搭建环境]
系统: ubuntu 16.04 LST

安装交叉编译环境
```
$ sudo apt-get install gcc-5-arm-linux-gnueabi
$ sudo apt-get install gcc-5-arm-linux-gnueabihf
$ arm-linux-gnueabi-gcc-5 hello.c –g –o hello -static
```

安装qemu
```
$ sudo apt install qemu-system
$ sudo apt install qemu-user-static
```

可以看到文件系统从 94208 扇区开始。我们将这个值乘以 512 ，本例中为"94208 * 512=48234496"，这就是文件系统起始位置的偏移字节数
```
$ fdisk -l 2017-11-29-raspbian-stretch-lite.img
```
![](/assets/img/exploit/2018-02-08-qemu-environment/0x007.png)

挂载镜像
```
$ sudo mkdir /mnt/raspbian
$ sudo mount -v -o offset=48234496 -t ext4 ./2017-11-29-raspbian-stretch-lite.img /mnt/raspbian
$ sudo nano /mnt/raspbian/etc/ld.so.preload		# 将该文件中的所有内容注释掉
```

启动虚拟机
```
$ qemu-system-arm -kernel kernel-qemu-4.4.34-jessie \
	-cpu arm1176 \
	-m 256 \
	-M versatilepb \
	-serial stdio \
	-append "root=/dev/sda2 rootfstype=ext4 rw" \
	-drive format=raw,file=2017-11-29-raspbian-stretch-lite.img \
	-redir tcp:5022::22 \		# 为ssh预留
	-redir tcp:2333::2333		# # 为gdbserver预留，用于远程调试
# login: pi		password: raspberry
```
![](/assets/img/exploit/2018-02-08-qemu-environment/0x008.png)

开启ssh服务
```
$ sudo service ssh start
$ sudo update-rc.d ssh enable
```

访问虚拟机
```
$ ssh pi@127.0.0.1 -p 5022
$ scp -P 5022 hello pi@127.0.0.1:/tmp
```

安装gdb-multiarch
```
$ sudo apt install gdb-multiarch
```

编译gdbserver，http://ftp.gnu.org/gnu/gdb/找到对应版本
```
$ CC="arm-linux-gnueabi-gcc-5" CXX="arm-linux-gnueabi-g++-5" ./configure --target=arm-linux-gnueabi --host="arm-linux-gnueabi" --prefix="/root/toolchain/Linux/qemu-system/system-image-arm"
$ make install
```

使用scp将gdbserver上传到虚拟机
```
$ scp -P 5022 arm-linux-gnueabi-gdbserver pi@127.0.0.1:/tmp
```

启动gdbserver
```
$ ln -s arm-linux-gnueabi-gdbserver gdbserver
$ ./gdbserver 0.0.0.0:2333 hello
```

安装gef增强脚本，需要手动安装keystone-engine模块
```
# https://github.com/hugsy/gef
# https://github.com/keystone-engine/keystone
# http://www.keystone-engine.org/docs/
```
![](/assets/img/exploit/2018-02-08-qemu-environment/0x009.png)

启动gdb
```
$ gdb-multiarch
gef> set architecture arm
gef> gef-remote –q 127.0.0.1:2333
```

### 0x03 aarch64 in qemu

[搭建环境]
系统: ubuntu 16.04 LST

编译qemu
```
$ wget https://download.qemu.org/qemu-2.11.1.tar.xz
$ tar xvJf qemu-2.11.1.tar.xz
$ cd qemu-2.11.1
$ mkdir build
$ cd build
$ sudo apt-get install libcap-dev
$ sudo apt-get install libpixman-1-dev
$ ../configure --target-list=aarch64-linux-user,aarch64-softmmu --audio-drv-list=alsa --enable-virtfs
$ make -j8
$ sudo make install
```

安装工具链
```
# http://www.veryarm.com/aarch64-linux-gnu-gcc
```

添加环境变量，修改/etc/bash.bashrc
```
# Add Aarch64 toolschain path
if [ -d /root/toolchain/Linux/gcc/gcc-linaro-aarch64-linux-gnu-4.9-2014.07_linux ] ; then
    PATH=/root/toolchain/Linux/gcc/gcc-linaro-aarch64-linux-gnu-4.9-2014.07_linux/bin:"${PATH}"
fi
```

编译内核，https://www.kernel.org/
```
#!/bin/bash
cross_compile=/root/toolchain/Linux/gcc/gcc-linaro-aarch64-linux-gnu-4.9-2014.07_linux/bin/aarch64-linux-gnu-
make CROSS_COMPILE=$cross_compile ARCH=arm64 O=./out_aarch64 defconfig
make CROSS_COMPILE=$cross_compile ARCH=arm64 O=./out_aarch64 menuconfig
make CROSS_COMPILE=$cross_compile ARCH=arm64 O=./out_aarch64 Image -j4

$ chmod a+x make.sh
$ ./make.sh

General setup  --->
    ----> [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support
Device Drivers  --->
    [*] Block devices  --->
        <*>   RAM block device support
        (65536) Default RAM disk size (kbytes)
```

可能出现编译错误，安装依赖
```
$ apt-get install libncurses5-dev
$ sudo apt-get install libasound2-dev libasound2
```

在kernel配置中添加ramdisk启动方式
![](/assets/img/exploit/2018-02-08-qemu-environment/0x010.png)
![](/assets/img/exploit/2018-02-08-qemu-environment/0x011.png)


制作根文件系统
```
$ make menuconfig

Build Options  --->
    [*] Build BusyBox as a static binary (no shared libs)
    (/root/toolchain/Linux/gcc/gcc-linaro-aarch64-linux-gnu-4.9-2014.07_linux/bin/aarch64-linux-gnu-) Cross Compiler prefix
```
![](/assets/img/exploit/2018-02-08-qemu-environment/0x012.png)

编译安装
```
$ make && make install
```

制作启动用的ramdisk
```
# mk_ramdisk.sh
#!/bin/bash
sudo rm -rf rootfs
sudo rm -rf tmpfs
sudo rm -rf ramdisk*
sudo mkdir rootfs
sudo cp ../busybox-1.24.2/_install/*  rootfs/ -raf
sudo mkdir -p rootfs/proc/
sudo mkdir -p rootfs/sys/
sudo mkdir -p rootfs/tmp/
sudo mkdir -p rootfs/root/
sudo mkdir -p rootfs/var/
sudo mkdir -p rootfs/mnt/
sudo cp etc rootfs/ -arf
sudo mkdir -p rootfs/lib
sudo cp -arf ../gcc-linaro-aarch64-linux-gnu-4.9-2014.07_linux/aarch64-linux-gnu/libc/lib/aarch64-linux-gnu/* rootfs/lib/
sudo rm rootfs/lib/*.a
sudo ../gcc-linaro-aarch64-linux-gnu-4.9-2014.07_linux/bin/aarch64-linux-gnu-strip rootfs/lib/*
sudo mkdir -p rootfs/dev/
sudo mknod rootfs/dev/tty1 c 4 1
sudo mknod rootfs/dev/tty2 c 4 2
sudo mknod rootfs/dev/tty3 c 4 3
sudo mknod rootfs/dev/tty4 c 4 4
sudo mknod rootfs/dev/console c 5 1
sudo mknod rootfs/dev/null c 1 3
sudo dd if=/dev/zero of=ramdisk bs=1M count=16
sudo mkfs.ext4 -F ramdisk
sudo mkdir -p tmpfs
sudo mount -t ext4 ramdisk ./tmpfs/  -o loop
sudo cp -raf rootfs/*  tmpfs/
sudo umount tmpfs
sudo gzip --best -c ramdisk > ramdisk.gz
sudo mkimage -n "ramdisk" -A arm -O linux -T ramdisk -C gzip -d ramdisk.gz ramdisk.img

$ ./mk_ramdisk.sh
```

添加网络支持
```
$ sudo apt-get install uml-utilities
$ sudo apt-get install bridge-utils
```

内核已经支持开启了tun支持
```
$ ls -l /dev/net/tun
crw-rw-rw- 1 root root 10, 200 2月  20 08:03 /dev/net/tun
```

修改/etc/network/interfaces
```
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto eth0
#NetworkManager#iface eth0 inet dhcp

auto br0
iface br0 inet dhcp
   bridge_ports eth0
```

修改/etc/qemu-ifup
```
#!/bin/sh

echo sudo tunctl -u $(id -un) -t $1
sudo tunctl -u $(id -un) -t $1

echo sudo ifconfig $1 0.0.0.0 promisc up
sudo ifconfig $1 0.0.0.0 promisc up

echo sudo brctl addif br0 $1
sudo brctl addif br0 $1

echo brctl show
brctl show

sudo ifconfig br0 192.168.11.20  
```

修改/etc/qemu-ifdown
```
#!/bin/sh

echo sudo brctl delif br0 $1
sudo brctl delif br0 $1

echo sudo tunctl -d $1
sudo tunctl -d $1
 
echo brctl show
brctl show
```

赋予可执行权限
```
chmod +x /etc/qemu-ifup
chmod +x /etc/qemu-ifdown
```

启动qemu
```
sudo qemu-system-aarch64 \
    -M  virt \
    -cpu cortex-a53 \
    -smp 2 \
    -m 4096M \
    -kernel ./linux-4.10/out_aarch64/arch/arm64/boot/Image \
    -nographic \
    -append "root=/dev/ram0 rw rootfstype=ext4 console=ttyAMA0 init=/linuxrc ignore_loglevel" \
    -initrd ./rootfs/ramdisk \
    -net nic,vlan=0 -net tap,vlan=0,ifname=tap0 \
	-fsdev local,security_model=passthrough,id=fsdev0,path=/tmp/share \
	-device virtio-9p-pci,id=fs0,fsdev=fsdev0,mount_tag=hostshare
```
![](/assets/img/exploit/2018-02-08-qemu-environment/0x013.png)

挂载共享文件
```
$ mkdir /tmp/host_files
$ mount -t 9p -o trans=virtio,version=9p2000.L hostshare /tmp/host_files
```


### 0x04 aarch32 in qemu

Cannot use CONFIG_CC_STACKPROTECTOR_STRONG: -fstack-protector-strong not supported by compiler
```
stackp-flag := -fstack-protector-strong
stackp-name := STRONG

修改成

stackp-flag := $(call cc-option, -fno-stack-protector)
```

error : openssl/bio.h :No such file or folder
```
$ sudo apt install libssl-dev
```

编译Linux-4.10
```
#!/bin/bash
cross_compile=/root/toolchain/Linux/gcc/arm-2014.05/bin/arm-none-linux-gnueabi-
make CROSS_COMPILE=$cross_compile ARCH=arm O=./out_aarch32 vexpress_defconfig
make CROSS_COMPILE=$cross_compile ARCH=arm O=./out_aarch32 menuconfig
make CROSS_COMPILE=$cross_compile ARCH=arm O=./out_aarch32 zImage -j4
make CROSS_COMPILE=$cross_compile ARCH=arm O=./out_aarch32 dtbs -j4

$ chmod a+x make.sh
$ ./make.sh

Kernel Features  --->
    Memory split (3G/1G user/kernel split)  --->
    [*] High Memory Support
Device Drivers  --->
    [*] Block devices  --->
        <*>   RAM block device support
        (8192)  Default RAM disk size (kbytes)
```
![](/assets/img/exploit/2018-02-08-qemu-environment/0x014.png)
![](/assets/img/exploit/2018-02-08-qemu-environment/0x015.png)
![](/assets/img/exploit/2018-02-08-qemu-environment/0x016.png)

制作根文件系统
```
$ make menuconfig

Build Options  ---> 
    [*] Build BusyBox as a static binary (no shared libs)
    (/home/pengdonglin/qemu/aarch32/arm-2014.05/bin/arm-none-linux-gnueabi-) Cross Compiler prefix
```
![](/assets/img/exploit/2018-02-08-qemu-environment/0x017.png)

生成镜像
```
$ make && make install
```

制作启动用的ramdisk
```
#!/bin/bash
sudo rm -rf rootfs
sudo rm -rf tmpfs
sudo rm -rf ramdisk*
sudo mkdir rootfs
sudo cp ../busybox-1.24.2/_install/*  rootfs/ -raf
sudo mkdir -p rootfs/proc/
sudo mkdir -p rootfs/sys/
sudo mkdir -p rootfs/tmp/
sudo mkdir -p rootfs/root/
sudo mkdir -p rootfs/var/
sudo mkdir -p rootfs/mnt/
sudo cp etc rootfs/ -arf
sudo cp -arf /root/toolchain/Linux/gcc/arm-2014.05/arm-none-linux-gnueabi/libc/lib rootfs/
sudo rm -rf rootfs/lib/*.a
sudo /root/toolchain/Linux/gcc/arm-2014.05/bin/arm-none-linux-gnueabi-strip rootfs/lib/*
sudo mkdir -p rootfs/dev/
sudo mknod rootfs/dev/tty1 c 4 1
sudo mknod rootfs/dev/tty2 c 4 2
sudo mknod rootfs/dev/tty3 c 4 3
sudo mknod rootfs/dev/tty4 c 4 4
sudo mknod rootfs/dev/console c 5 1
sudo mknod rootfs/dev/null c 1 3
sudo dd if=/dev/zero of=ramdisk bs=1M count=8
sudo mkfs.ext4 -F ramdisk
sudo mkdir -p tmpfs
sudo mount -t ext4 ramdisk ./tmpfs/  -o loop
sudo cp -raf rootfs/*  tmpfs/
sudo umount tmpfs
sudo gzip --best -c ramdisk > ramdisk.gz
sudo mkimage -n "ramdisk" -A arm -O linux -T ramdisk -C gzip -d ramdisk.gz ramdisk.img

$ ./mk_ramdisk.sh
```
![](/assets/img/exploit/2018-02-08-qemu-environment/0x018.png)

启动qemu
```
$ sudo qemu-system-arm \
       -M vexpress-a9 \
       -m 1024M \
       -smp 2 \
       -kernel ./linux-4.10/out_aarch32/arch/arm/boot/zImage \
       -nographic \
       -append "root=/dev/ram0 rw rootfstype=ext4 console=ttyAMA0 init=/linuxrc ignore_loglevel" \
       -initrd ./rootfs/ramdisk \
       -dtb ./linux-4.10/out_aarch32/arch/arm/boot/dts/vexpress-v2p-ca9.dtb \
       -net nic,vlan=0 -net tap,vlan=0,ifname=tap0
```

最后卡在这里，先留个坑
![](/assets/img/exploit/2018-02-08-qemu-environment/0x019.png)