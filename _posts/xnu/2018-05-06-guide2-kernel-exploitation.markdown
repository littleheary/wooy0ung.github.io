---
layout:     post
title:      Learning A Guide to Kernel Exploitation
author:     wooy0ung
tags: 		macos
category:  	xnu
---


>[index]
>0x001 macOS kernel code dump  
>0x002 macOS kernel debug  
<!-- more -->


## 0x001 macOS kernel code dump

>physical machin(server): macOS 10.12.6 Sierra  192.168.1.63  
>virtual machin(guest): OS X 10.11 EI Capitan 	192.168.1.53  
>kdk: Kernel_Debug_Kit_10.11_build_15A284  

install OS X 10.11 (15A284)，and lldb

while booting the machain, press command+R enter recovery mode, close SIP and set boot-args
```
$ csrutil disable

//because we can't set boot-args after booting by terminal
//but we can edit "/Library/ Preferences/SystemConfiguration/com.apple.Boot.plist" to change boot-args
$ nvram boot-args="debug=0xd44 _panicd_ip=192.168.1.63"
```

after booting, install kdk and lldb, config them
```
$ sudo cp -rf /Library/Developer/KDKs/KDK_10.11_15A284.kdk/System/Library /System/
$ sudo kextcache -invalidate /
```

config server
```
$ sudo mkdir /PanicDumps
$ sudo chown root:wheel /PanicDumps
$ sudo chmod 1777 /PanicDumps
$ sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.kdumpd.plist
$ sudo launchctl list | grep kdump
```

now, copy poc to the virtual machain, and execute it

kernel would crash, core-xnu-xxx.gz would send to the server
![](/assets/img/xnu/2018-05-06-guide2-kernel-exploitation/0x001-001.png)

we can attach to debug the machain
```
$ tmuxinator start voltron
$ lldb
(lldb) kdp-remote 192.168.1.53
```

like that
![](/assets/img/xnu/2018-05-06-guide2-kernel-exploitation/0x001-002.png)

and we also can debug the core dump
```
$ sudo lldb -c /PanicDumps/core-xnu-3247.1.106-192.168.1.53-90ccf4f8
```


## 0x002 macOS kernel debug

>physical machin(server): macOS 10.12.6 Sierra  192.168.1.63  
>virtual machin(guest): OS X 10.11 EI Capitan 	192.168.1.53  
>kdk: Kernel_Debug_Kit_10.11_build_15A284  

config your environment by section 0x001, and set boot-args

this time we don't need to enter recovery mode to set it
```
#debug=0x141启用了远程调试模式
#kext-dev-mode=1可以用来加载未签名的kext文件（kext文件：Mac OSX的内核扩展，通常用于设备驱动程序）
#kcsuffix=development我们之前复制的是kernel.development文件，这里允许我们根据这个文件进行引导内核发展
#pmuflags=1禁止看门狗定时器
#-v 内核调试的时候会有一些有用的信息
#
$ sudo nvram boot-args="debug=0x141 kext-dev-mode=1 kcsuffix=development pmuflags=1 -v"
$ sudo kextcache -invalidate /
```

create kernel debug task
```
$ lldb
(lldb) target create /Library/Developer/KDKs/KDK_10.11_15A284.kdk/System/Library/Kernels/kernel.development
```

now, we need to reboot virtual machain
![](/assets/img/xnu/2018-05-06-guide2-kernel-exploitation/0x002-001.png)

attach it
```
$ tmuxinator start voltron
(lldb) kdp-remote 192.168.1.53
```
![](/assets/img/xnu/2018-05-06-guide2-kernel-exploitation/0x002-002.png)

that's all