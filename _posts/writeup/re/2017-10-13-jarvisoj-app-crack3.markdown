---
layout:     post
title:      JarvisOJ 软件密码破解-3
author:     wooy0ung
tags: 		re
category:  	writeup
---


>Problem Address:  
>https://www.jarvisoj.com  
>  
>Problem Description:  
>对压缩包中的程序进行分析并获取flag。flag形式为16位大写md5。  
>  
>题目来源：CFF2016  
>  
>Download:  
>https://dn.jarvisoj.com/challengefiles/CTF_300.rar.9cd550120aaa43a503f5332e6b3ccfda  
<!-- more -->


### 0x00 动态调试

拖到IDA, 定位到WinMain函数, 没有什么有用信息

![](/assets/img/writeup/re/2017-10-13-jarvisoj-app-crack3/0x00.png)

用OD打开动态调试, 检索字符串, 定位到这里

![](/assets/img/writeup/re/2017-10-13-jarvisoj-app-crack3/0x01.png)

往下翻到0x00401970, 这里频繁从内存中取值, 先下个断

![](/assets/img/writeup/re/2017-10-13-jarvisoj-app-crack3/0x02.png)

再次启动程序, 输入16个"1", 点击确定成功断下

![](/assets/img/writeup/re/2017-10-13-jarvisoj-app-crack3/0x03.png)

内存区跟随0x571458, 这里存放输入字串

![](/assets/img/writeup/re/2017-10-13-jarvisoj-app-crack3/0x04.png)

跟随0x56B0D0, 这里存放一个hex表

![](/assets/img/writeup/re/2017-10-13-jarvisoj-app-crack3/0x05.png)

程序根据输入字串, 循环差表64次

![](/assets/img/writeup/re/2017-10-13-jarvisoj-app-crack3/0x06.png)


### 0x01 静态分析

回到IDA, 定位到0x00401970

![](/assets/img/writeup/re/2017-10-13-jarvisoj-app-crack3/0x07.png)

根据调试结果, dword_571458是输入字串, byte_56b0d0存放着表项

![](/assets/img/writeup/re/2017-10-13-jarvisoj-app-crack3/0x08.png)

查看引用, 定位到sub_401B80函数, 这里对查表后数据进行校验

![](/assets/img/writeup/re/2017-10-13-jarvisoj-app-crack3/0x09.png)

```
key[0] + key[1] + key[2] + key[3] == 71
key[5] + key[6] + key[7] == 3
key[0] - key[1] == 68
key[1] - key[2] == 2
key[2] - key[3] == 59
-key[4] + key[6] == 10
key[6] - key[7] == 9
key[4] - key[5]== 52
```

先爆破这8 byte

```
print "[x0-x3]: "
for x0 in range(256):
	for x1 in range(256):
		if (x0 - x1)%256 == 68:
			for x2 in range(256):
				if (x1 - x2)%256 == 2:
					for x3 in range(256):
						if x2 - x3 == -59 and (x0 + x1 + x2 + x3)%256 == 71:
							print hex(x0),
							print hex(x1),
							print hex(x2),
							print hex(x3)
print "[x4-x7]: "
for x4 in range(256):
	for x5 in range(256):
		if (x4 - x5)%256 == 52:
			for x6 in range(256):
				if (-x4 + x6)%256 == 10:
					for x7 in range(256):
						if (x6 - x7)%256 == 9 and (x5 + x6 + x7)%256 == 3:
							print hex(x4),
							print hex(x5),
							print hex(x6),
							print hex(x7)
```

得到key = [0x77,0x33,0x31,0x6c,0x64,0x30,0x6e,0x65]


### 0x02 crack

再把表copy出来

```
pad = 
[0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5,0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF,0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23,0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24,0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98,0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9,0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3,0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F,0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC,0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35,0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5,0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79,0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7,0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A,0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5,0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6,0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D]
```

仿照IDA伪代码生成一下flag

```
// crk.cpp
#include <cstdio>
#define __int8 char

unsigned char key[8] = {0x77,0x33,0x31,0x6c,0x64,0x30,0x6e,0x65};
unsigned char pad[256] =
{0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5,0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF,0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23,0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24,0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98,0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9,0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3,0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F,0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC,0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35,0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5,0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79,0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7,0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A,0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5,0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6,0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D};

void findKey()
{
    signed int v0; // esi
    unsigned __int8 v1; // bl
    char v2; // cl
    char v3; // al
    char v4; // cl
    char v5; // al
    unsigned __int8 v6; // dl
    unsigned __int8 v7; // bl
    char v8; // cl
    char v9; // al
    unsigned __int8 v10; // dl
    unsigned __int8 v11; // bl
    char v12; // cl
    char v13; // al
    unsigned __int8 v14; // dl
    unsigned __int8 v15; // bl
    int v16; // edi
    unsigned __int8 v17; // cl
    unsigned __int8 v18; // dl
    char v19; // dl
    int result; // eax
    char v21; // cl

    v0 = 64;
    do
    {
        v1 = pad[key[3]];
        v2 = pad[pad[pad[key[1]]]];
        v3 = pad[pad[pad[pad[key[0]]]]];
        key[2] = pad[pad[key[2]]];
        key[1] = v2;
        v4 = pad[key[2]];
        key[0] = v3;
        v5 = pad[key[1]];
        key[3] = v1;
        v6 = pad[v1];
        v7 = pad[key[4]];
        key[3] = v6;
        key[2] = v4;
        v8 = pad[v6];
        key[1] = v5;
        v9 = pad[key[2]];
        key[4] = v7;
        v10 = pad[v7];
        v11 = pad[key[5]];
        key[4] = v10;
        key[3] = v8;
        v12 = pad[v10];
        key[2] = v9;
        v13 = pad[key[3]];
        key[5] = v11;
        v14 = pad[v11];
        v15 = pad[key[6]];
        v16 = pad[pad[key[7]]];
        key[5] = v14;
        key[4] = v12;
        v17 = pad[v14];
        key[3] = v13;
        v18 = pad[pad[v15]];
        key[4] = pad[key[4]];
        v19 = pad[v18];
        key[5] = pad[v17];
        result = pad[v16];
        v21 = pad[result];
        key[6] = v19;
        key[7] = v21;
        --v0;
     }while ( v0 );
  return;
}

int main()
{
	findKey();
	for(int i=0;i<8;i++)
		printf("%02X",key[i]);
	printf("\n");

	return 0;
}
```

注意

```
HIBYTE(dword_571458)	-->		dword_571458[3]
BYTE2(dword_571458)		-->		dword_571458[2]
BYTE1(dword_571458)		-->		dword_571458[1]
dword_571458			-->		dword_571458[0]
```

编译运行findKey, get flag~

![](/assets/img/writeup/re/2017-10-13-jarvisoj-app-crack3/0x0a.png)